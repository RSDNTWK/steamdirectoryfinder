// This file is automatically generated.

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace Steam4Net
{
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public class ClientUtilsVTable
    {
        public IntPtr GetInstallPath0;
        public IntPtr GetUserBaseFolderInstallImage1;
        public IntPtr GetManagedContentRoot2;
        public IntPtr GetSecondsSinceAppActive3;
        public IntPtr GetSecondsSinceComputerActive4;
        public IntPtr SetComputerActive5;
        public IntPtr GetConnectedUniverse6;
        public IntPtr GetServerRealTime7;
        public IntPtr GetIPCountry8;
        public IntPtr GetImageSize9;
        public IntPtr GetImageRGBA10;
        public IntPtr GetCSERIPPort11;
        public IntPtr GetNumRunningApps12;
        public IntPtr GetCurrentBatteryPower13;
        public IntPtr SetOfflineMode14;
        public IntPtr GetOfflineMode15;
        public IntPtr SetAppIDForCurrentPipe16;
        public IntPtr GetAppID17;
        public IntPtr SetAPIDebuggingActive18;
        public IntPtr IsAPICallCompleted19;
        public IntPtr GetAPICallFailureReason20;
        public IntPtr GetAPICallResult21;
        public IntPtr SignalAppsToShutDown22;
        public IntPtr GetCellID23;
        public IntPtr BIsGlobalInstance24;
        public IntPtr CheckFileSignature25;
        public IntPtr GetBuildID26;
        public IntPtr SetCurrentUIMode27;
        public IntPtr ShowGamepadTextInput28;
        public IntPtr GetEnteredGamepadTextLength29;
        public IntPtr GetEnteredGamepadTextInput30;
        public IntPtr GamepadTextInputClosed31;
        public IntPtr SetSpew32;
        public IntPtr BDownloadsDisabled33;
        public IntPtr SetFocusedWindow34;
        public IntPtr GetSteamUILanguage35;
        private IntPtr DTorIClientUtils36;
    };

    [InteropHelp.InterfaceVersionAttribute("CLIENTUTILS_INTERFACE_VERSION001")]
    public class IClientUtils : InteropHelp.NativeWrapper<ClientUtilsVTable>
    {
        public string GetInstallPath()
        {
            return
                InteropHelp.DecodeAnsiReturn(
                    Marshal.PtrToStringAnsi(GetFunction<NativeGetInstallPath>(Functions.GetInstallPath0)(ObjectAddress)));
        }

        public string GetUserBaseFolderInstallImage()
        {
            return
                InteropHelp.DecodeAnsiReturn(
                    Marshal.PtrToStringAnsi(
                        GetFunction<NativeGetUserBaseFolderInstallImage>(Functions.GetUserBaseFolderInstallImage1)(
                            ObjectAddress)));
        }

        public string GetManagedContentRoot()
        {
            return
                InteropHelp.DecodeAnsiReturn(
                    Marshal.PtrToStringAnsi(
                        GetFunction<NativeGetManagedContentRoot>(Functions.GetManagedContentRoot2)(ObjectAddress)));
        }

        public uint GetSecondsSinceAppActive()
        {
            return GetFunction<NativeGetSecondsSinceAppActive>(Functions.GetSecondsSinceAppActive3)(ObjectAddress);
        }

        public uint GetSecondsSinceComputerActive()
        {
            return
                GetFunction<NativeGetSecondsSinceComputerActive>(Functions.GetSecondsSinceComputerActive4)(ObjectAddress);
        }

        public void SetComputerActive()
        {
            GetFunction<NativeSetComputerActive>(Functions.SetComputerActive5)(ObjectAddress);
        }

        public EUniverse GetConnectedUniverse()
        {
            return GetFunction<NativeGetConnectedUniverse>(Functions.GetConnectedUniverse6)(ObjectAddress);
        }

        public uint GetServerRealTime()
        {
            return GetFunction<NativeGetServerRealTime>(Functions.GetServerRealTime7)(ObjectAddress);
        }

        public string GetIpCountry()
        {
            return
                InteropHelp.DecodeAnsiReturn(
                    Marshal.PtrToStringAnsi(GetFunction<NativeGetIpCountry>(Functions.GetIPCountry8)(ObjectAddress)));
        }

        public bool GetImageSize(int iImage, ref uint pnWidth, ref uint pnHeight)
        {
            return GetFunction<NativeGetImageSizeIuu>(Functions.GetImageSize9)(ObjectAddress, iImage, ref pnWidth,
                ref pnHeight);
        }

        public bool GetImageRgba(int iImage, byte[] pubDest, int nDestBufferSize)
        {
            return GetFunction<NativeGetImageRgbaibi>(Functions.GetImageRGBA10)(ObjectAddress, iImage, pubDest,
                nDestBufferSize);
        }

        public bool GetCseripPort(ref uint unIp, ref ushort usPort)
        {
            return GetFunction<NativeGetCseripPortUu>(Functions.GetCSERIPPort11)(ObjectAddress, ref unIp, ref usPort);
        }

        public uint GetNumRunningApps()
        {
            return GetFunction<NativeGetNumRunningApps>(Functions.GetNumRunningApps12)(ObjectAddress);
        }

        public byte GetCurrentBatteryPower()
        {
            return GetFunction<NativeGetCurrentBatteryPower>(Functions.GetCurrentBatteryPower13)(ObjectAddress);
        }

        public void SetOfflineMode(bool bOffline)
        {
            GetFunction<NativeSetOfflineModeB>(Functions.SetOfflineMode14)(ObjectAddress, bOffline);
        }

        public bool GetOfflineMode()
        {
            return GetFunction<NativeGetOfflineMode>(Functions.GetOfflineMode15)(ObjectAddress);
        }

        public uint SetAppIdForCurrentPipe(uint nAppId, bool bTrackProcess)
        {
            return GetFunction<NativeSetAppIdForCurrentPipeUb>(Functions.SetAppIDForCurrentPipe16)(ObjectAddress, nAppId,
                bTrackProcess);
        }

        public uint GetAppId()
        {
            return GetFunction<NativeGetAppId>(Functions.GetAppID17)(ObjectAddress);
        }

        public void SetApiDebuggingActive(bool bActive, bool bVerbose)
        {
            GetFunction<NativeSetApiDebuggingActiveBb>(Functions.SetAPIDebuggingActive18)(ObjectAddress, bActive,
                bVerbose);
        }

        public bool IsApiCallCompleted(ulong hSteamApiCall, ref bool pbFailed)
        {
            return GetFunction<NativeIsApiCallCompletedUb>(Functions.IsAPICallCompleted19)(ObjectAddress, hSteamApiCall,
                ref pbFailed);
        }

        public ESteamApiCallFailure GetApiCallFailureReason(ulong hSteamApiCall)
        {
            return GetFunction<NativeGetApiCallFailureReasonU>(Functions.GetAPICallFailureReason20)(ObjectAddress,
                hSteamApiCall);
        }

        public bool GetApiCallResult(ulong hSteamApiCall, byte[] pCallback, int iCallbackExpected, ref bool pbFailed)
        {
            return GetFunction<NativeGetApiCallResultUbiib>(Functions.GetAPICallResult21)(ObjectAddress, hSteamApiCall,
                pCallback, pCallback.Length, iCallbackExpected, ref pbFailed);
        }

        public bool SignalAppsToShutDown()
        {
            return GetFunction<NativeSignalAppsToShutDown>(Functions.SignalAppsToShutDown22)(ObjectAddress);
        }

        public uint GetCellId()
        {
            return GetFunction<NativeGetCellId>(Functions.GetCellID23)(ObjectAddress);
        }

        public bool BIsGlobalInstance()
        {
            return GetFunction<NativeBIsGlobalInstance>(Functions.BIsGlobalInstance24)(ObjectAddress);
        }

        public ulong CheckFileSignature(string szFileName)
        {
            return GetFunction<NativeCheckFileSignatureS>(Functions.CheckFileSignature25)(ObjectAddress, szFileName);
        }

        public ulong GetBuildId()
        {
            return GetFunction<NativeGetBuildId>(Functions.GetBuildID26)(ObjectAddress);
        }

        public void SetCurrentUiMode(EuiMode eUiMode)
        {
            GetFunction<NativeSetCurrentUiModeE>(Functions.SetCurrentUIMode27)(ObjectAddress, eUiMode);
        }

        public bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eInputLineMode,
            string szText, uint uMaxLength)
        {
            return GetFunction<NativeShowGamepadTextInputEesu>(Functions.ShowGamepadTextInput28)(ObjectAddress,
                eInputMode, eInputLineMode, szText, uMaxLength);
        }

        public uint GetEnteredGamepadTextLength()
        {
            return GetFunction<NativeGetEnteredGamepadTextLength>(Functions.GetEnteredGamepadTextLength29)(ObjectAddress);
        }

        public bool GetEnteredGamepadTextInput(StringBuilder pchValue)
        {
            return GetFunction<NativeGetEnteredGamepadTextInputSu>(Functions.GetEnteredGamepadTextInput30)(
                ObjectAddress, pchValue, (uint)pchValue.Capacity);
        }

        public void GamepadTextInputClosed(int hSteamPipe, bool arg1, string arg2)
        {
            GetFunction<NativeGamepadTextInputClosedIbs>(Functions.GamepadTextInputClosed31)(ObjectAddress, hSteamPipe,
                arg1, arg2);
        }

        public void SetSpew(ESpewGroup eSpewGroup, int iSpewLevel, int iLogLevel)
        {
            GetFunction<NativeSetSpewEii>(Functions.SetSpew32)(ObjectAddress, eSpewGroup, iSpewLevel, iLogLevel);
        }

        public bool BDownloadsDisabled()
        {
            return GetFunction<NativeBDownloadsDisabled>(Functions.BDownloadsDisabled33)(ObjectAddress);
        }

        public void SetFocusedWindow(EWindowType eWindowType, uint uUnk)
        {
            GetFunction<NativeSetFocusedWindowEu>(Functions.SetFocusedWindow34)(ObjectAddress, eWindowType, uUnk);
        }

        public string GetSteamUiLanguage()
        {
            return
                InteropHelp.DecodeAnsiReturn(
                    Marshal.PtrToStringAnsi(
                        GetFunction<NativeGetSteamUiLanguage>(Functions.GetSteamUILanguage35)(ObjectAddress)));
        }

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate IntPtr NativeGetInstallPath(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate IntPtr NativeGetUserBaseFolderInstallImage(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate IntPtr NativeGetManagedContentRoot(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetSecondsSinceAppActive(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetSecondsSinceComputerActive(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetComputerActive(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate EUniverse NativeGetConnectedUniverse(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetServerRealTime(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate IntPtr NativeGetIpCountry(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetImageSizeIuu(IntPtr thisptr, int iImage, ref uint pnWidth, ref uint pnHeight);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetImageRgbaibi(IntPtr thisptr, int iImage, byte[] pubDest, int nDestBufferSize);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetCseripPortUu(IntPtr thisptr, ref uint unIp, ref ushort usPort);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetNumRunningApps(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate byte NativeGetCurrentBatteryPower(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetOfflineModeB(IntPtr thisptr, [MarshalAs(UnmanagedType.I1)] bool bOffline);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetOfflineMode(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeSetAppIdForCurrentPipeUb(
            IntPtr thisptr, uint nAppId, [MarshalAs(UnmanagedType.I1)] bool bTrackProcess);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetAppId(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetApiDebuggingActiveBb(
            IntPtr thisptr, [MarshalAs(UnmanagedType.I1)] bool bActive, [MarshalAs(UnmanagedType.I1)] bool bVerbose);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeIsApiCallCompletedUb(IntPtr thisptr, ulong hSteamApiCall, ref bool pbFailed);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ESteamApiCallFailure NativeGetApiCallFailureReasonU(IntPtr thisptr, ulong hSteamApiCall);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetApiCallResultUbiib(
            IntPtr thisptr, ulong hSteamApiCall, byte[] pCallback, int cubCallback, int iCallbackExpected,
            ref bool pbFailed);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSignalAppsToShutDown(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetCellId(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBIsGlobalInstance(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ulong NativeCheckFileSignatureS(IntPtr thisptr, string szFileName);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ulong NativeGetBuildId(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetCurrentUiModeE(IntPtr thisptr, EuiMode eUiMode);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeShowGamepadTextInputEesu(
            IntPtr thisptr, EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eInputLineMode, string szText,
            uint uMaxLength);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetEnteredGamepadTextLength(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetEnteredGamepadTextInputSu(
            IntPtr thisptr, StringBuilder pchValue, uint cchValueMax);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeGamepadTextInputClosedIbs(
            IntPtr thisptr, int hSteamPipe, [MarshalAs(UnmanagedType.I1)] bool arg1, string arg2);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetSpewEii(IntPtr thisptr, ESpewGroup eSpewGroup, int iSpewLevel, int iLogLevel);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBDownloadsDisabled(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetFocusedWindowEu(IntPtr thisptr, EWindowType eWindowType, uint uUnk);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate IntPtr NativeGetSteamUiLanguage(IntPtr thisptr);
    };
}