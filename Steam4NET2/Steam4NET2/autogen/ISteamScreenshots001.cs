// This file is automatically generated.

using System;
using System.Runtime.InteropServices;

namespace Steam4Net
{
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public class SteamScreenshots001VTable
    {
        public IntPtr WriteScreenshot0;
        public IntPtr AddScreenshotToLibrary1;
        public IntPtr TriggerScreenshot2;
        public IntPtr HookScreenshots3;
        public IntPtr SetLocation4;
        public IntPtr TagUser5;
        private IntPtr DTorISteamScreenshots0016;
    };

    [InteropHelp.InterfaceVersionAttribute("STEAMSCREENSHOTS_INTERFACE_VERSION001")]
    public class SteamScreenshots001 : InteropHelp.NativeWrapper<SteamScreenshots001VTable>
    {
        public uint WriteScreenshot(byte[] pubRgb, int nWidth, int nHeight)
        {
            return GetFunction<NativeWriteScreenshotBuii>(Functions.WriteScreenshot0)(ObjectAddress, pubRgb,
                (uint)pubRgb.Length, nWidth, nHeight);
        }

        public uint AddScreenshotToLibrary(string pchJpegOrTgaFilename, string pchJpegOrTgaThumbFilename, int nWidth,
            int nHeight)
        {
            return GetFunction<NativeAddScreenshotToLibrarySsii>(Functions.AddScreenshotToLibrary1)(ObjectAddress,
                pchJpegOrTgaFilename, pchJpegOrTgaThumbFilename, nWidth, nHeight);
        }

        public void TriggerScreenshot()
        {
            GetFunction<NativeTriggerScreenshot>(Functions.TriggerScreenshot2)(ObjectAddress);
        }

        public void HookScreenshots(bool bHook)
        {
            GetFunction<NativeHookScreenshotsB>(Functions.HookScreenshots3)(ObjectAddress, bHook);
        }

        public bool SetLocation(uint hScreenshot, string pchLocation)
        {
            return GetFunction<NativeSetLocationUs>(Functions.SetLocation4)(ObjectAddress, hScreenshot, pchLocation);
        }

        public bool TagUser(uint hScreenshot, CSteamId steamId)
        {
            return GetFunction<NativeTagUserUc>(Functions.TagUser5)(ObjectAddress, hScreenshot,
                steamId.ConvertToUint64());
        }

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeWriteScreenshotBuii(
            IntPtr thisptr, byte[] pubRgb, uint cubRgb, int nWidth, int nHeight);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeAddScreenshotToLibrarySsii(
            IntPtr thisptr, string pchJpegOrTgaFilename, string pchJpegOrTgaThumbFilename, int nWidth, int nHeight);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeTriggerScreenshot(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeHookScreenshotsB(IntPtr thisptr, [MarshalAs(UnmanagedType.I1)] bool bHook);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSetLocationUs(IntPtr thisptr, uint hScreenshot, string pchLocation);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeTagUserUc(IntPtr thisptr, uint hScreenshot, ulong steamId);
    };
}