// This file is automatically generated.

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace Steam4Net
{
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public class SteamUser004VTable
    {
        public IntPtr GetHSteamUser0;
        public IntPtr LogOn1;
        public IntPtr LogOff2;
        public IntPtr BLoggedOn3;
        public IntPtr GetLogonState4;
        public IntPtr BConnected5;
        public IntPtr GetSteamID6;
        public IntPtr IsVACBanned7;
        public IntPtr RequireShowVACBannedMessage8;
        public IntPtr AcknowledgeVACBanning9;
        public IntPtr NClientGameIDAdd10;
        public IntPtr RemoveClientGame11;
        public IntPtr SetClientGameServer12;
        public IntPtr SetSteam2Ticket13;
        public IntPtr AddServerNetAddress14;
        public IntPtr SetEmail15;
        public IntPtr GetSteamGameConnectToken16;
        public IntPtr SetRegistryString17;
        public IntPtr GetRegistryString18;
        public IntPtr SetRegistryInt19;
        public IntPtr GetRegistryInt20;
        public IntPtr InitiateGameConnection21;
        public IntPtr TerminateGameConnection22;
        public IntPtr SetSelfAsPrimaryChatDestination23;
        public IntPtr IsPrimaryChatDestination24;
        public IntPtr RequestLegacyCDKey25;
        private IntPtr DTorISteamUser00426;
    };

    [InteropHelp.InterfaceVersionAttribute("SteamUser004")]
    public class SteamUser004 : InteropHelp.NativeWrapper<SteamUser004VTable>
    {
        public int GetHSteamUser()
        {
            return GetFunction<NativeGetHSteamUser>(Functions.GetHSteamUser0)(ObjectAddress);
        }

        public void LogOn(CSteamId steamId)
        {
            GetFunction<NativeLogOnC>(Functions.LogOn1)(ObjectAddress, steamId.ConvertToUint64());
        }

        public void LogOff()
        {
            GetFunction<NativeLogOff>(Functions.LogOff2)(ObjectAddress);
        }

        public bool BLoggedOn()
        {
            return GetFunction<NativeBLoggedOn>(Functions.BLoggedOn3)(ObjectAddress);
        }

        public ELogonState GetLogonState()
        {
            return GetFunction<NativeGetLogonState>(Functions.GetLogonState4)(ObjectAddress);
        }

        public bool BConnected()
        {
            return GetFunction<NativeBConnected>(Functions.BConnected5)(ObjectAddress);
        }

        public CSteamId GetSteamId()
        {
            ulong ret = 0;
            GetFunction<NativeGetSteamId>(Functions.GetSteamID6)(ObjectAddress, ref ret);
            return new CSteamId(ret);
        }

        public bool IsVacBanned(EvacBan eVacBan)
        {
            return GetFunction<NativeIsVacBannedE>(Functions.IsVACBanned7)(ObjectAddress, eVacBan);
        }

        public bool RequireShowVacBannedMessage(EvacBan eVacBan)
        {
            return GetFunction<NativeRequireShowVacBannedMessageE>(Functions.RequireShowVACBannedMessage8)(
                ObjectAddress, eVacBan);
        }

        public void AcknowledgeVacBanning(EvacBan eVacBan)
        {
            GetFunction<NativeAcknowledgeVacBanningE>(Functions.AcknowledgeVACBanning9)(ObjectAddress, eVacBan);
        }

        public int NClientGameIdAdd(int nGameId)
        {
            return GetFunction<NativeNClientGameIdAddI>(Functions.NClientGameIDAdd10)(ObjectAddress, nGameId);
        }

        public void RemoveClientGame(int nClientGameId)
        {
            GetFunction<NativeRemoveClientGameI>(Functions.RemoveClientGame11)(ObjectAddress, nClientGameId);
        }

        public void SetClientGameServer(int nClientGameId, uint unIpServer, ushort usPortServer)
        {
            GetFunction<NativeSetClientGameServerIuu>(Functions.SetClientGameServer12)(ObjectAddress, nClientGameId,
                unIpServer, usPortServer);
        }

        public void SetSteam2Ticket(byte[] pubTicket)
        {
            GetFunction<NativeSetSteam2TicketBi>(Functions.SetSteam2Ticket13)(ObjectAddress, pubTicket, pubTicket.Length);
        }

        public void AddServerNetAddress(uint unIp, ushort unPort)
        {
            GetFunction<NativeAddServerNetAddressUu>(Functions.AddServerNetAddress14)(ObjectAddress, unIp, unPort);
        }

        public bool SetEmail(string pchEmail)
        {
            return GetFunction<NativeSetEmailS>(Functions.SetEmail15)(ObjectAddress, pchEmail);
        }

        public int GetSteamGameConnectToken(byte[] pBlob)
        {
            return GetFunction<NativeGetSteamGameConnectTokenBi>(Functions.GetSteamGameConnectToken16)(ObjectAddress,
                pBlob, pBlob.Length);
        }

        public bool SetRegistryString(ERegistrySubTree eRegistrySubTree, string pchKey, string pchValue)
        {
            return GetFunction<NativeSetRegistryStringEss>(Functions.SetRegistryString17)(ObjectAddress,
                eRegistrySubTree, pchKey, pchValue);
        }

        public bool GetRegistryString(ERegistrySubTree eRegistrySubTree, string pchKey, StringBuilder pchValue)
        {
            return GetFunction<NativeGetRegistryStringEssi>(Functions.GetRegistryString18)(ObjectAddress,
                eRegistrySubTree, pchKey, pchValue, pchValue.Capacity);
        }

        public bool SetRegistryInt(ERegistrySubTree eRegistrySubTree, string pchKey, int iValue)
        {
            return GetFunction<NativeSetRegistryIntEsi>(Functions.SetRegistryInt19)(ObjectAddress, eRegistrySubTree,
                pchKey, iValue);
        }

        public bool GetRegistryInt(ERegistrySubTree eRegistrySubTree, string pchKey, ref int piValue)
        {
            return GetFunction<NativeGetRegistryIntEsi>(Functions.GetRegistryInt20)(ObjectAddress, eRegistrySubTree,
                pchKey, ref piValue);
        }

        public int InitiateGameConnection(byte[] pBlob, CSteamId steamId, int nGameAppId, uint unIpServer,
            ushort usPortServer, bool bSecure)
        {
            return GetFunction<NativeInitiateGameConnectionBiciuub>(Functions.InitiateGameConnection21)(ObjectAddress,
                pBlob, pBlob.Length, steamId.ConvertToUint64(), nGameAppId, unIpServer, usPortServer, bSecure);
        }

        public void TerminateGameConnection(uint unIpServer, ushort usPortServer)
        {
            GetFunction<NativeTerminateGameConnectionUu>(Functions.TerminateGameConnection22)(ObjectAddress, unIpServer,
                usPortServer);
        }

        public void SetSelfAsPrimaryChatDestination()
        {
            GetFunction<NativeSetSelfAsPrimaryChatDestination>(Functions.SetSelfAsPrimaryChatDestination23)(
                ObjectAddress);
        }

        public bool IsPrimaryChatDestination()
        {
            return GetFunction<NativeIsPrimaryChatDestination>(Functions.IsPrimaryChatDestination24)(ObjectAddress);
        }

        public void RequestLegacyCdKey(uint iAppId)
        {
            GetFunction<NativeRequestLegacyCdKeyU>(Functions.RequestLegacyCDKey25)(ObjectAddress, iAppId);
        }

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeGetHSteamUser(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeLogOnC(IntPtr thisptr, ulong steamId);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeLogOff(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBLoggedOn(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ELogonState NativeGetLogonState(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBConnected(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeGetSteamId(IntPtr thisptr, ref ulong retarg);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeIsVacBannedE(IntPtr thisptr, EvacBan eVacBan);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeRequireShowVacBannedMessageE(IntPtr thisptr, EvacBan eVacBan);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeAcknowledgeVacBanningE(IntPtr thisptr, EvacBan eVacBan);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeNClientGameIdAddI(IntPtr thisptr, int nGameId);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeRemoveClientGameI(IntPtr thisptr, int nClientGameId);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetClientGameServerIuu(
            IntPtr thisptr, int nClientGameId, uint unIpServer, ushort usPortServer);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetSteam2TicketBi(IntPtr thisptr, byte[] pubTicket, int cubTicket);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeAddServerNetAddressUu(IntPtr thisptr, uint unIp, ushort unPort);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSetEmailS(IntPtr thisptr, string pchEmail);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeGetSteamGameConnectTokenBi(IntPtr thisptr, byte[] pBlob, int cbMaxBlob);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSetRegistryStringEss(
            IntPtr thisptr, ERegistrySubTree eRegistrySubTree, string pchKey, string pchValue);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetRegistryStringEssi(
            IntPtr thisptr, ERegistrySubTree eRegistrySubTree, string pchKey, StringBuilder pchValue, int cbValue);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSetRegistryIntEsi(
            IntPtr thisptr, ERegistrySubTree eRegistrySubTree, string pchKey, int iValue);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetRegistryIntEsi(
            IntPtr thisptr, ERegistrySubTree eRegistrySubTree, string pchKey, ref int piValue);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeInitiateGameConnectionBiciuub(
            IntPtr thisptr, byte[] pBlob, int cbMaxBlob, ulong steamId, int nGameAppId, uint unIpServer,
            ushort usPortServer, [MarshalAs(UnmanagedType.I1)] bool bSecure);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeTerminateGameConnectionUu(IntPtr thisptr, uint unIpServer, ushort usPortServer);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetSelfAsPrimaryChatDestination(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeIsPrimaryChatDestination(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeRequestLegacyCdKeyU(IntPtr thisptr, uint iAppId);
    };
}