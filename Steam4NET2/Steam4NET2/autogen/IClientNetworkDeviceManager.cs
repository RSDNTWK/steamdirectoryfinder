// This file is automatically generated.

using System;
using System.Runtime.InteropServices;

namespace Steam4Net
{
    public enum ENetworkDeviceState
    {
    };

    public enum EWirelessSecurityFlags
    {
    };

    [StructLayout(LayoutKind.Sequential, Pack = 8)]
    public struct WirelessAccessPointT
    {
        public int m_iPadding;
    };

    [StructLayout(LayoutKind.Sequential, Pack = 8)]
    public struct WirelessCredentialsT
    {
        public int m_iPadding;
    };

    public enum ENetworkDeviceManagerError
    {
    };

    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public class ClientNetworkDeviceManagerVTable
    {
        public IntPtr IsInterfaceValid0;
        public IntPtr RefreshDevices1;
        public IntPtr GetWirelessDeviceState2;
        public IntPtr GetWiredDeviceCount3;
        public IntPtr GetWiredDeviceState4;
        public IntPtr IsWiredDevicePluggedIn5;
        public IntPtr GetActiveWirelessAccessPoint6;
        public IntPtr EnumerateWirelessAccessPoints7;
        public IntPtr GetCachedCredentialsForSSID8;
        public IntPtr GetPreferredSecurityMethod9;
        public IntPtr ActivateWiredConnection10;
        public IntPtr DeactivateWiredConnection11;
        public IntPtr ConnectToAccessPoint12;
        public IntPtr DisconnectFromAccessPoint13;
        private IntPtr DTorIClientNetworkDeviceManager14;
    };

    [InteropHelp.InterfaceVersionAttribute("CLIENTNETWORKDEVICEMANAGER_INTERFACE_VERSION001")]
    public class ClientNetworkDeviceManager : InteropHelp.NativeWrapper<ClientNetworkDeviceManagerVTable>
    {
        public bool IsInterfaceValid()
        {
            return GetFunction<NativeIsInterfaceValid>(Functions.IsInterfaceValid0)(ObjectAddress);
        }

        public void RefreshDevices()
        {
            GetFunction<NativeRefreshDevices>(Functions.RefreshDevices1)(ObjectAddress);
        }

        public ENetworkDeviceState GetWirelessDeviceState()
        {
            return GetFunction<NativeGetWirelessDeviceState>(Functions.GetWirelessDeviceState2)(ObjectAddress);
        }

        public int GetWiredDeviceCount()
        {
            return GetFunction<NativeGetWiredDeviceCount>(Functions.GetWiredDeviceCount3)(ObjectAddress);
        }

        public ENetworkDeviceState GetWiredDeviceState(int iDevice)
        {
            return GetFunction<NativeGetWiredDeviceStateI>(Functions.GetWiredDeviceState4)(ObjectAddress, iDevice);
        }

        public bool IsWiredDevicePluggedIn(int iDevice)
        {
            return GetFunction<NativeIsWiredDevicePluggedInI>(Functions.IsWiredDevicePluggedIn5)(ObjectAddress, iDevice);
        }

        public bool GetActiveWirelessAccessPoint(ref WirelessAccessPointT pAccessPoint)
        {
            return
                GetFunction<NativeGetActiveWirelessAccessPointW>(Functions.GetActiveWirelessAccessPoint6)(
                    ObjectAddress, ref pAccessPoint);
        }

        public bool EnumerateWirelessAccessPoints(ref WirelessAccessPointT pAccessPoint, uint uUnk, ref uint puUnk)
        {
            return
                GetFunction<NativeEnumerateWirelessAccessPointsWuu>(Functions.EnumerateWirelessAccessPoints7)(
                    ObjectAddress, ref pAccessPoint, uUnk, ref puUnk);
        }

        public bool GetCachedCredentialsForSsid(string pchUnk, ref WirelessCredentialsT pCredentials)
        {
            return
                GetFunction<NativeGetCachedCredentialsForSsidsw>(Functions.GetCachedCredentialsForSSID8)(ObjectAddress,
                    pchUnk, ref pCredentials);
        }

        public EWirelessSecurityFlags GetPreferredSecurityMethod(uint uUnk)
        {
            return GetFunction<NativeGetPreferredSecurityMethodU>(Functions.GetPreferredSecurityMethod9)(ObjectAddress,
                uUnk);
        }

        public ENetworkDeviceManagerError ActivateWiredConnection(int iConnection)
        {
            return GetFunction<NativeActivateWiredConnectionI>(Functions.ActivateWiredConnection10)(ObjectAddress,
                iConnection);
        }

        public void DeactivateWiredConnection(int iConnection)
        {
            GetFunction<NativeDeactivateWiredConnectionI>(Functions.DeactivateWiredConnection11)(ObjectAddress,
                iConnection);
        }

        public ENetworkDeviceManagerError ConnectToAccessPoint(string pchUnk1, bool bUnk,
            EWirelessSecurityFlags eSecurityFlags, string pchUnk2)
        {
            return GetFunction<NativeConnectToAccessPointSbes>(Functions.ConnectToAccessPoint12)(ObjectAddress, pchUnk1,
                bUnk, eSecurityFlags, pchUnk2);
        }

        public void DisconnectFromAccessPoint()
        {
            GetFunction<NativeDisconnectFromAccessPoint>(Functions.DisconnectFromAccessPoint13)(ObjectAddress);
        }

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeIsInterfaceValid(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeRefreshDevices(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ENetworkDeviceState NativeGetWirelessDeviceState(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeGetWiredDeviceCount(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ENetworkDeviceState NativeGetWiredDeviceStateI(IntPtr thisptr, int iDevice);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeIsWiredDevicePluggedInI(IntPtr thisptr, int iDevice);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetActiveWirelessAccessPointW(IntPtr thisptr, ref WirelessAccessPointT pAccessPoint
            );

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeEnumerateWirelessAccessPointsWuu(
            IntPtr thisptr, ref WirelessAccessPointT pAccessPoint, uint uUnk, ref uint puUnk);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetCachedCredentialsForSsidsw(
            IntPtr thisptr, string pchUnk, ref WirelessCredentialsT pCredentials);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate EWirelessSecurityFlags NativeGetPreferredSecurityMethodU(IntPtr thisptr, uint uUnk);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ENetworkDeviceManagerError NativeActivateWiredConnectionI(IntPtr thisptr, int iConnection);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeDeactivateWiredConnectionI(IntPtr thisptr, int iConnection);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ENetworkDeviceManagerError NativeConnectToAccessPointSbes(
            IntPtr thisptr, string pchUnk1, [MarshalAs(UnmanagedType.I1)] bool bUnk,
            EWirelessSecurityFlags eSecurityFlags, string pchUnk2);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeDisconnectFromAccessPoint(IntPtr thisptr);
    };
}