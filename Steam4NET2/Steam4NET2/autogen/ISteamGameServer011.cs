// This file is automatically generated.

using System;
using System.Runtime.InteropServices;

namespace Steam4Net
{
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public class SteamGameServer011VTable
    {
        public IntPtr InitGameServer0;
        public IntPtr SetProduct1;
        public IntPtr SetGameDescription2;
        public IntPtr SetModDir3;
        public IntPtr SetDedicatedServer4;
        public IntPtr LogOn5;
        public IntPtr LogOnAnonymous6;
        public IntPtr LogOff7;
        public IntPtr BLoggedOn8;
        public IntPtr BSecure9;
        public IntPtr GetSteamID10;
        public IntPtr WasRestartRequested11;
        public IntPtr SetMaxPlayerCount12;
        public IntPtr SetBotPlayerCount13;
        public IntPtr SetServerName14;
        public IntPtr SetMapName15;
        public IntPtr SetPasswordProtected16;
        public IntPtr SetSpectatorPort17;
        public IntPtr SetSpectatorServerName18;
        public IntPtr ClearAllKeyValues19;
        public IntPtr SetKeyValue20;
        public IntPtr SetGameTags21;
        public IntPtr SetGameData22;
        public IntPtr SetRegion23;
        public IntPtr SendUserConnectAndAuthenticate24;
        public IntPtr CreateUnauthenticatedUserConnection25;
        public IntPtr SendUserDisconnect26;
        public IntPtr BUpdateUserData27;
        public IntPtr GetAuthSessionTicket28;
        public IntPtr BeginAuthSession29;
        public IntPtr EndAuthSession30;
        public IntPtr CancelAuthTicket31;
        public IntPtr UserHasLicenseForApp32;
        public IntPtr RequestUserGroupStatus33;
        public IntPtr GetGameplayStats34;
        public IntPtr GetServerReputation35;
        public IntPtr GetPublicIP36;
        public IntPtr HandleIncomingPacket37;
        public IntPtr GetNextOutgoingPacket38;
        public IntPtr EnableHeartbeats39;
        public IntPtr SetHeartbeatInterval40;
        public IntPtr ForceHeartbeat41;
        public IntPtr AssociateWithClan42;
        public IntPtr ComputeNewPlayerCompatibility43;
        private IntPtr DTorISteamGameServer01144;
    };

    [InteropHelp.InterfaceVersionAttribute("SteamGameServer011")]
    public class SteamGameServer011 : InteropHelp.NativeWrapper<SteamGameServer011VTable>
    {
        public bool InitGameServer(uint unGameIp, ushort unGamePort, ushort usQueryPort, uint unServerFlags, uint nAppId,
            string pchVersion)
        {
            return GetFunction<NativeInitGameServerUuuuus>(Functions.InitGameServer0)(ObjectAddress, unGameIp,
                unGamePort, usQueryPort, unServerFlags, nAppId, pchVersion);
        }

        public void SetProduct(string pchProductName)
        {
            GetFunction<NativeSetProductS>(Functions.SetProduct1)(ObjectAddress, pchProductName);
        }

        public void SetGameDescription(string pchGameDescription)
        {
            GetFunction<NativeSetGameDescriptionS>(Functions.SetGameDescription2)(ObjectAddress, pchGameDescription);
        }

        public void SetModDir(string pchModDir)
        {
            GetFunction<NativeSetModDirS>(Functions.SetModDir3)(ObjectAddress, pchModDir);
        }

        public void SetDedicatedServer(bool bDedicatedServer)
        {
            GetFunction<NativeSetDedicatedServerB>(Functions.SetDedicatedServer4)(ObjectAddress, bDedicatedServer);
        }

        public void LogOn(string pszAccountName, string pszPassword)
        {
            GetFunction<NativeLogOnSs>(Functions.LogOn5)(ObjectAddress, pszAccountName, pszPassword);
        }

        public void LogOnAnonymous()
        {
            GetFunction<NativeLogOnAnonymous>(Functions.LogOnAnonymous6)(ObjectAddress);
        }

        public void LogOff()
        {
            GetFunction<NativeLogOff>(Functions.LogOff7)(ObjectAddress);
        }

        public bool BLoggedOn()
        {
            return GetFunction<NativeBLoggedOn>(Functions.BLoggedOn8)(ObjectAddress);
        }

        public bool BSecure()
        {
            return GetFunction<NativeBSecure>(Functions.BSecure9)(ObjectAddress);
        }

        public CSteamId GetSteamId()
        {
            ulong ret = 0;
            GetFunction<NativeGetSteamId>(Functions.GetSteamID10)(ObjectAddress, ref ret);
            return new CSteamId(ret);
        }

        public bool WasRestartRequested()
        {
            return GetFunction<NativeWasRestartRequested>(Functions.WasRestartRequested11)(ObjectAddress);
        }

        public void SetMaxPlayerCount(int cPlayersMax)
        {
            GetFunction<NativeSetMaxPlayerCountI>(Functions.SetMaxPlayerCount12)(ObjectAddress, cPlayersMax);
        }

        public void SetBotPlayerCount(int cBotPlayers)
        {
            GetFunction<NativeSetBotPlayerCountI>(Functions.SetBotPlayerCount13)(ObjectAddress, cBotPlayers);
        }

        public void SetServerName(string pszServerName)
        {
            GetFunction<NativeSetServerNameS>(Functions.SetServerName14)(ObjectAddress, pszServerName);
        }

        public void SetMapName(string pszMapName)
        {
            GetFunction<NativeSetMapNameS>(Functions.SetMapName15)(ObjectAddress, pszMapName);
        }

        public void SetPasswordProtected(bool bPasswordProtected)
        {
            GetFunction<NativeSetPasswordProtectedB>(Functions.SetPasswordProtected16)(ObjectAddress, bPasswordProtected);
        }

        public void SetSpectatorPort(ushort unSpectatorPort)
        {
            GetFunction<NativeSetSpectatorPortU>(Functions.SetSpectatorPort17)(ObjectAddress, unSpectatorPort);
        }

        public void SetSpectatorServerName(string pszSpectatorServerName)
        {
            GetFunction<NativeSetSpectatorServerNameS>(Functions.SetSpectatorServerName18)(ObjectAddress,
                pszSpectatorServerName);
        }

        public void ClearAllKeyValues()
        {
            GetFunction<NativeClearAllKeyValues>(Functions.ClearAllKeyValues19)(ObjectAddress);
        }

        public void SetKeyValue(string pKey, string pValue)
        {
            GetFunction<NativeSetKeyValueSs>(Functions.SetKeyValue20)(ObjectAddress, pKey, pValue);
        }

        public void SetGameTags(string pchGameTags)
        {
            GetFunction<NativeSetGameTagsS>(Functions.SetGameTags21)(ObjectAddress, pchGameTags);
        }

        public void SetGameData(string pchGameData)
        {
            GetFunction<NativeSetGameDataS>(Functions.SetGameData22)(ObjectAddress, pchGameData);
        }

        public void SetRegion(string pchRegionName)
        {
            GetFunction<NativeSetRegionS>(Functions.SetRegion23)(ObjectAddress, pchRegionName);
        }

        public int SendUserConnectAndAuthenticate(uint unIpClient, byte[] pvAuthBlob, ref CSteamId pSteamIdUser)
        {
            ulong s0 = 0;
            var result =
                GetFunction<NativeSendUserConnectAndAuthenticateUbuc>(Functions.SendUserConnectAndAuthenticate24)(
                    ObjectAddress, unIpClient, pvAuthBlob, (uint)pvAuthBlob.Length, ref s0);
            pSteamIdUser = new CSteamId(s0);
            return result;
        }

        public CSteamId CreateUnauthenticatedUserConnection()
        {
            ulong ret = 0;
            GetFunction<NativeCreateUnauthenticatedUserConnection>(Functions.CreateUnauthenticatedUserConnection25)(
                ObjectAddress, ref ret);
            return new CSteamId(ret);
        }

        public void SendUserDisconnect(CSteamId steamIdUser)
        {
            GetFunction<NativeSendUserDisconnectC>(Functions.SendUserDisconnect26)(ObjectAddress,
                steamIdUser.ConvertToUint64());
        }

        public bool BUpdateUserData(CSteamId steamIdUser, string pchPlayerName, uint uScore)
        {
            return GetFunction<NativeBUpdateUserDataCsu>(Functions.BUpdateUserData27)(ObjectAddress,
                steamIdUser.ConvertToUint64(), pchPlayerName, uScore);
        }

        public uint GetAuthSessionTicket(byte[] pTicket, ref uint pcbTicket)
        {
            return GetFunction<NativeGetAuthSessionTicketBiu>(Functions.GetAuthSessionTicket28)(ObjectAddress, pTicket,
                pTicket.Length, ref pcbTicket);
        }

        public EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, CSteamId steamId)
        {
            return GetFunction<NativeBeginAuthSessionBic>(Functions.BeginAuthSession29)(ObjectAddress, pAuthTicket,
                pAuthTicket.Length, steamId.ConvertToUint64());
        }

        public void EndAuthSession(CSteamId steamId)
        {
            GetFunction<NativeEndAuthSessionC>(Functions.EndAuthSession30)(ObjectAddress, steamId.ConvertToUint64());
        }

        public void CancelAuthTicket(uint hAuthTicket)
        {
            GetFunction<NativeCancelAuthTicketU>(Functions.CancelAuthTicket31)(ObjectAddress, hAuthTicket);
        }

        public EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamId steamId, uint appId)
        {
            return GetFunction<NativeUserHasLicenseForAppCu>(Functions.UserHasLicenseForApp32)(ObjectAddress,
                steamId.ConvertToUint64(), appId);
        }

        public bool RequestUserGroupStatus(CSteamId steamIdUser, CSteamId steamIdGroup)
        {
            return GetFunction<NativeRequestUserGroupStatusCc>(Functions.RequestUserGroupStatus33)(ObjectAddress,
                steamIdUser.ConvertToUint64(), steamIdGroup.ConvertToUint64());
        }

        public void GetGameplayStats()
        {
            GetFunction<NativeGetGameplayStats>(Functions.GetGameplayStats34)(ObjectAddress);
        }

        public ulong GetServerReputation()
        {
            return GetFunction<NativeGetServerReputation>(Functions.GetServerReputation35)(ObjectAddress);
        }

        public uint GetPublicIp()
        {
            return GetFunction<NativeGetPublicIp>(Functions.GetPublicIP36)(ObjectAddress);
        }

        public bool HandleIncomingPacket(byte[] pData, uint srcIp, ushort srcPort)
        {
            return GetFunction<NativeHandleIncomingPacketBiuu>(Functions.HandleIncomingPacket37)(ObjectAddress, pData,
                pData.Length, srcIp, srcPort);
        }

        public int GetNextOutgoingPacket(byte[] pOut, ref uint pNetAdr, ref ushort pPort)
        {
            return GetFunction<NativeGetNextOutgoingPacketBiuu>(Functions.GetNextOutgoingPacket38)(ObjectAddress, pOut,
                pOut.Length, ref pNetAdr, ref pPort);
        }

        public void EnableHeartbeats(bool bActive)
        {
            GetFunction<NativeEnableHeartbeatsB>(Functions.EnableHeartbeats39)(ObjectAddress, bActive);
        }

        public void SetHeartbeatInterval(int iHeartbeatInterval)
        {
            GetFunction<NativeSetHeartbeatIntervalI>(Functions.SetHeartbeatInterval40)(ObjectAddress, iHeartbeatInterval);
        }

        public void ForceHeartbeat()
        {
            GetFunction<NativeForceHeartbeat>(Functions.ForceHeartbeat41)(ObjectAddress);
        }

        public ulong AssociateWithClan(CSteamId clanId)
        {
            return GetFunction<NativeAssociateWithClanC>(Functions.AssociateWithClan42)(ObjectAddress,
                clanId.ConvertToUint64());
        }

        public ulong ComputeNewPlayerCompatibility(CSteamId steamId)
        {
            return
                GetFunction<NativeComputeNewPlayerCompatibilityC>(Functions.ComputeNewPlayerCompatibility43)(
                    ObjectAddress, steamId.ConvertToUint64());
        }

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeInitGameServerUuuuus(
            IntPtr thisptr, uint unGameIp, ushort unGamePort, ushort usQueryPort, uint unServerFlags, uint nAppId,
            string pchVersion);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetProductS(IntPtr thisptr, string pchProductName);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetGameDescriptionS(IntPtr thisptr, string pchGameDescription);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetModDirS(IntPtr thisptr, string pchModDir);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetDedicatedServerB(
            IntPtr thisptr, [MarshalAs(UnmanagedType.I1)] bool bDedicatedServer);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeLogOnSs(IntPtr thisptr, string pszAccountName, string pszPassword);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeLogOnAnonymous(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeLogOff(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBLoggedOn(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBSecure(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeGetSteamId(IntPtr thisptr, ref ulong retarg);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeWasRestartRequested(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetMaxPlayerCountI(IntPtr thisptr, int cPlayersMax);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetBotPlayerCountI(IntPtr thisptr, int cBotPlayers);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetServerNameS(IntPtr thisptr, string pszServerName);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetMapNameS(IntPtr thisptr, string pszMapName);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetPasswordProtectedB(
            IntPtr thisptr, [MarshalAs(UnmanagedType.I1)] bool bPasswordProtected);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetSpectatorPortU(IntPtr thisptr, ushort unSpectatorPort);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetSpectatorServerNameS(IntPtr thisptr, string pszSpectatorServerName);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeClearAllKeyValues(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetKeyValueSs(IntPtr thisptr, string pKey, string pValue);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetGameTagsS(IntPtr thisptr, string pchGameTags);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetGameDataS(IntPtr thisptr, string pchGameData);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetRegionS(IntPtr thisptr, string pchRegionName);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeSendUserConnectAndAuthenticateUbuc(
            IntPtr thisptr, uint unIpClient, byte[] pvAuthBlob, uint cubAuthBlobSize, ref ulong pSteamIdUser);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeCreateUnauthenticatedUserConnection(IntPtr thisptr, ref ulong retarg);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSendUserDisconnectC(IntPtr thisptr, ulong steamIdUser);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBUpdateUserDataCsu(
            IntPtr thisptr, ulong steamIdUser, string pchPlayerName, uint uScore);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetAuthSessionTicketBiu(
            IntPtr thisptr, byte[] pTicket, int cbMaxTicket, ref uint pcbTicket);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate EBeginAuthSessionResult NativeBeginAuthSessionBic(
            IntPtr thisptr, byte[] pAuthTicket, int cbAuthTicket, ulong steamId);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeEndAuthSessionC(IntPtr thisptr, ulong steamId);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeCancelAuthTicketU(IntPtr thisptr, uint hAuthTicket);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate EUserHasLicenseForAppResult NativeUserHasLicenseForAppCu(
            IntPtr thisptr, ulong steamId, uint appId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeRequestUserGroupStatusCc(IntPtr thisptr, ulong steamIdUser, ulong steamIdGroup);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeGetGameplayStats(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ulong NativeGetServerReputation(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetPublicIp(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeHandleIncomingPacketBiuu(
            IntPtr thisptr, byte[] pData, int cbData, uint srcIp, ushort srcPort);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeGetNextOutgoingPacketBiuu(
            IntPtr thisptr, byte[] pOut, int cbMaxOut, ref uint pNetAdr, ref ushort pPort);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeEnableHeartbeatsB(IntPtr thisptr, [MarshalAs(UnmanagedType.I1)] bool bActive);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetHeartbeatIntervalI(IntPtr thisptr, int iHeartbeatInterval);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeForceHeartbeat(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ulong NativeAssociateWithClanC(IntPtr thisptr, ulong clanId);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ulong NativeComputeNewPlayerCompatibilityC(IntPtr thisptr, ulong steamId);
    };
}