// This file is automatically generated.

using System;
using System.Runtime.InteropServices;

namespace Steam4Net
{
    public enum EGameConnectSteamResponse
    {
        KeGameConnectSteamResponseWaitingForResponse = 0,
        KeGameConnectSteamResponseAuthorizedToPlay = 1,
        KeGameConnectSteamResponseDenied = 2,
        KeGameConnectSteamResponseExceededReasonableTimeStillWaiting = 3
    };

    [StructLayout(LayoutKind.Sequential, Pack = 8)]
    public struct ConnectedUserInfoT
    {
        public int m_cubConnectedUserInfo;
        public int m_nCountOfGuestUsers;
        public SteamIdT m_SteamID;
        public uint m_unIPPublic;
        public uint m_nFrags;
        public double m_flConnectTime;
        public EGameConnectSteamResponse m_eGameConnectSteamResponse;
        public EDenyReason m_eDenyReason;
    };

    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public class ClientGameServerVTable
    {
        public IntPtr GetHSteamUser0;
        public IntPtr InitGameServer1;
        public IntPtr SetProduct2;
        public IntPtr SetGameDescription3;
        public IntPtr SetModDir4;
        public IntPtr SetDedicatedServer5;
        public IntPtr LogOn6;
        public IntPtr LogOnAnonymous7;
        public IntPtr LogOff8;
        public IntPtr GetSteamID9;
        public IntPtr BLoggedOn10;
        public IntPtr BSecure11;
        public IntPtr WasRestartRequested12;
        public IntPtr SetMaxPlayerCount13;
        public IntPtr SetBotPlayerCount14;
        public IntPtr SetServerName15;
        public IntPtr SetMapName16;
        public IntPtr SetPasswordProtected17;
        public IntPtr SetSpectatorPort18;
        public IntPtr SetSpectatorServerName19;
        public IntPtr ClearAllKeyValues20;
        public IntPtr SetKeyValue21;
        public IntPtr SetGameTags22;
        public IntPtr SetGameData23;
        public IntPtr SetRegion24;
        public IntPtr SendUserConnectAndAuthenticate25;
        public IntPtr CreateUnauthenticatedUserConnection26;
        public IntPtr SendUserDisconnect27;
        public IntPtr BUpdateUserData28;
        public IntPtr GetAuthSessionTicket29;
        public IntPtr BeginAuthSession30;
        public IntPtr EndAuthSession31;
        public IntPtr CancelAuthTicket32;
        public IntPtr IsUserSubscribedAppInTicket33;
        public IntPtr RequestUserGroupStatus34;
        public IntPtr GetGameplayStats35;
        public IntPtr GetServerReputation36;
        public IntPtr GetPublicIP37;
        public IntPtr HandleIncomingPacket38;
        public IntPtr GetNextOutgoingPacket39;
        public IntPtr EnableHeartbeats40;
        public IntPtr SetHeartbeatInterval41;
        public IntPtr ForceHeartbeat42;
        public IntPtr GetLogonState43;
        public IntPtr BConnected44;
        public IntPtr RaiseConnectionPriority45;
        public IntPtr ResetConnectionPriority46;
        public IntPtr SetCellID47;
        public IntPtr TrackSteamUsageEvent48;
        public IntPtr SetCountOfSimultaneousGuestUsersPerSteamAccount49;
        public IntPtr EnumerateConnectedUsers50;
        public IntPtr AssociateWithClan51;
        public IntPtr ComputeNewPlayerCompatibility52;
        public IntPtr _BGetUserAchievementStatus53;
        public IntPtr _GSSetSpawnCount54;
        public IntPtr _GSGetSteam2GetEncryptionKeyToSendToNewClient55;
        public IntPtr _GSSendSteam2UserConnect56;
        public IntPtr _GSSendSteam3UserConnect57;
        public IntPtr _GSSendUserConnect58;
        public IntPtr _GSRemoveUserConnect59;
        public IntPtr _GSUpdateStatus60;
        public IntPtr _GSCreateUnauthenticatedUser61;
        public IntPtr _GSSetServerType62;
        public IntPtr _SetBasicServerData63;
        public IntPtr _GSSendUserDisconnect64;
        private IntPtr DTorIClientGameServer65;
    };

    [InteropHelp.InterfaceVersionAttribute("CLIENTGAMESERVER_INTERFACE_VERSION001")]
    public class ClientGameServer : InteropHelp.NativeWrapper<ClientGameServerVTable>
    {
        public int GetHSteamUser()
        {
            return GetFunction<NativeGetHSteamUser>(Functions.GetHSteamUser0)(ObjectAddress);
        }

        public bool InitGameServer(uint unGameIp, ushort unGamePort, ushort usQueryPort, uint unServerFlags, uint nAppId,
            string pchVersion)
        {
            return GetFunction<NativeInitGameServerUuuuus>(Functions.InitGameServer1)(ObjectAddress, unGameIp,
                unGamePort, usQueryPort, unServerFlags, nAppId, pchVersion);
        }

        public void SetProduct(string pchProductName)
        {
            GetFunction<NativeSetProductS>(Functions.SetProduct2)(ObjectAddress, pchProductName);
        }

        public void SetGameDescription(string pchGameDescription)
        {
            GetFunction<NativeSetGameDescriptionS>(Functions.SetGameDescription3)(ObjectAddress, pchGameDescription);
        }

        public void SetModDir(string pchModDir)
        {
            GetFunction<NativeSetModDirS>(Functions.SetModDir4)(ObjectAddress, pchModDir);
        }

        public void SetDedicatedServer(bool bDedicatedServer)
        {
            GetFunction<NativeSetDedicatedServerB>(Functions.SetDedicatedServer5)(ObjectAddress, bDedicatedServer);
        }

        public void LogOn(string pchLogin, string pchPassword)
        {
            GetFunction<NativeLogOnSs>(Functions.LogOn6)(ObjectAddress, pchLogin, pchPassword);
        }

        public void LogOnAnonymous()
        {
            GetFunction<NativeLogOnAnonymous>(Functions.LogOnAnonymous7)(ObjectAddress);
        }

        public void LogOff()
        {
            GetFunction<NativeLogOff>(Functions.LogOff8)(ObjectAddress);
        }

        public CSteamId GetSteamId()
        {
            ulong ret = 0;
            GetFunction<NativeGetSteamId>(Functions.GetSteamID9)(ObjectAddress, ref ret);
            return new CSteamId(ret);
        }

        public bool BLoggedOn()
        {
            return GetFunction<NativeBLoggedOn>(Functions.BLoggedOn10)(ObjectAddress);
        }

        public bool BSecure()
        {
            return GetFunction<NativeBSecure>(Functions.BSecure11)(ObjectAddress);
        }

        public bool WasRestartRequested()
        {
            return GetFunction<NativeWasRestartRequested>(Functions.WasRestartRequested12)(ObjectAddress);
        }

        public void SetMaxPlayerCount(int cPlayersMax)
        {
            GetFunction<NativeSetMaxPlayerCountI>(Functions.SetMaxPlayerCount13)(ObjectAddress, cPlayersMax);
        }

        public void SetBotPlayerCount(int cBotPlayers)
        {
            GetFunction<NativeSetBotPlayerCountI>(Functions.SetBotPlayerCount14)(ObjectAddress, cBotPlayers);
        }

        public void SetServerName(string pchServerName)
        {
            GetFunction<NativeSetServerNameS>(Functions.SetServerName15)(ObjectAddress, pchServerName);
        }

        public void SetMapName(string pchMapName)
        {
            GetFunction<NativeSetMapNameS>(Functions.SetMapName16)(ObjectAddress, pchMapName);
        }

        public void SetPasswordProtected(bool bPasswordProtected)
        {
            GetFunction<NativeSetPasswordProtectedB>(Functions.SetPasswordProtected17)(ObjectAddress, bPasswordProtected);
        }

        public void SetSpectatorPort(ushort unSpectatorPort)
        {
            GetFunction<NativeSetSpectatorPortU>(Functions.SetSpectatorPort18)(ObjectAddress, unSpectatorPort);
        }

        public void SetSpectatorServerName(string pchSpectatorServerName)
        {
            GetFunction<NativeSetSpectatorServerNameS>(Functions.SetSpectatorServerName19)(ObjectAddress,
                pchSpectatorServerName);
        }

        public void ClearAllKeyValues()
        {
            GetFunction<NativeClearAllKeyValues>(Functions.ClearAllKeyValues20)(ObjectAddress);
        }

        public void SetKeyValue(string pKey, string pValue)
        {
            GetFunction<NativeSetKeyValueSs>(Functions.SetKeyValue21)(ObjectAddress, pKey, pValue);
        }

        public void SetGameTags(string pchGameTags)
        {
            GetFunction<NativeSetGameTagsS>(Functions.SetGameTags22)(ObjectAddress, pchGameTags);
        }

        public void SetGameData(string pchGameData)
        {
            GetFunction<NativeSetGameDataS>(Functions.SetGameData23)(ObjectAddress, pchGameData);
        }

        public void SetRegion(string pchRegionName)
        {
            GetFunction<NativeSetRegionS>(Functions.SetRegion24)(ObjectAddress, pchRegionName);
        }

        public EUserConnect SendUserConnectAndAuthenticate(uint unIpClient, byte[] pvAuthBlob, ref CSteamId pSteamIdUser)
        {
            ulong s0 = 0;
            var result =
                GetFunction<NativeSendUserConnectAndAuthenticateUbuc>(Functions.SendUserConnectAndAuthenticate25)(
                    ObjectAddress, unIpClient, pvAuthBlob, (uint)pvAuthBlob.Length, ref s0);
            pSteamIdUser = new CSteamId(s0);
            return result;
        }

        public CSteamId CreateUnauthenticatedUserConnection()
        {
            ulong ret = 0;
            GetFunction<NativeCreateUnauthenticatedUserConnection>(Functions.CreateUnauthenticatedUserConnection26)(
                ObjectAddress, ref ret);
            return new CSteamId(ret);
        }

        public void SendUserDisconnect(CSteamId steamIdUser)
        {
            GetFunction<NativeSendUserDisconnectC>(Functions.SendUserDisconnect27)(ObjectAddress,
                steamIdUser.ConvertToUint64());
        }

        public bool BUpdateUserData(CSteamId steamIdUser, string pchPlayerName, uint uScore)
        {
            return GetFunction<NativeBUpdateUserDataCsu>(Functions.BUpdateUserData28)(ObjectAddress,
                steamIdUser.ConvertToUint64(), pchPlayerName, uScore);
        }

        public uint GetAuthSessionTicket(byte[] pTicket, ref uint pcbTicket)
        {
            return GetFunction<NativeGetAuthSessionTicketBiu>(Functions.GetAuthSessionTicket29)(ObjectAddress, pTicket,
                pTicket.Length, ref pcbTicket);
        }

        public EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, CSteamId steamId)
        {
            return GetFunction<NativeBeginAuthSessionBic>(Functions.BeginAuthSession30)(ObjectAddress, pAuthTicket,
                pAuthTicket.Length, steamId.ConvertToUint64());
        }

        public void EndAuthSession(CSteamId steamId)
        {
            GetFunction<NativeEndAuthSessionC>(Functions.EndAuthSession31)(ObjectAddress, steamId.ConvertToUint64());
        }

        public void CancelAuthTicket(uint hAuthTicket)
        {
            GetFunction<NativeCancelAuthTicketU>(Functions.CancelAuthTicket32)(ObjectAddress, hAuthTicket);
        }

        public EUserHasLicenseForAppResult IsUserSubscribedAppInTicket(CSteamId steamId, uint appId)
        {
            return
                GetFunction<NativeIsUserSubscribedAppInTicketCu>(Functions.IsUserSubscribedAppInTicket33)(
                    ObjectAddress, steamId.ConvertToUint64(), appId);
        }

        public bool RequestUserGroupStatus(CSteamId steamIdUser, CSteamId steamIdGroup)
        {
            return GetFunction<NativeRequestUserGroupStatusCc>(Functions.RequestUserGroupStatus34)(ObjectAddress,
                steamIdUser.ConvertToUint64(), steamIdGroup.ConvertToUint64());
        }

        public void GetGameplayStats()
        {
            GetFunction<NativeGetGameplayStats>(Functions.GetGameplayStats35)(ObjectAddress);
        }

        public ulong GetServerReputation()
        {
            return GetFunction<NativeGetServerReputation>(Functions.GetServerReputation36)(ObjectAddress);
        }

        public uint GetPublicIp()
        {
            return GetFunction<NativeGetPublicIp>(Functions.GetPublicIP37)(ObjectAddress);
        }

        public bool HandleIncomingPacket(byte[] pData, uint srcIp, ushort srcPort)
        {
            return GetFunction<NativeHandleIncomingPacketBiuu>(Functions.HandleIncomingPacket38)(ObjectAddress, pData,
                pData.Length, srcIp, srcPort);
        }

        public int GetNextOutgoingPacket(byte[] pOut, ref uint pNetAdr, ref ushort pPort)
        {
            return GetFunction<NativeGetNextOutgoingPacketBiuu>(Functions.GetNextOutgoingPacket39)(ObjectAddress, pOut,
                pOut.Length, ref pNetAdr, ref pPort);
        }

        public void EnableHeartbeats(bool bEnabled)
        {
            GetFunction<NativeEnableHeartbeatsB>(Functions.EnableHeartbeats40)(ObjectAddress, bEnabled);
        }

        public void SetHeartbeatInterval(int iInterval)
        {
            GetFunction<NativeSetHeartbeatIntervalI>(Functions.SetHeartbeatInterval41)(ObjectAddress, iInterval);
        }

        public void ForceHeartbeat()
        {
            GetFunction<NativeForceHeartbeat>(Functions.ForceHeartbeat42)(ObjectAddress);
        }

        public ELogonState GetLogonState()
        {
            return GetFunction<NativeGetLogonState>(Functions.GetLogonState43)(ObjectAddress);
        }

        public bool BConnected()
        {
            return GetFunction<NativeBConnected>(Functions.BConnected44)(ObjectAddress);
        }

        public int RaiseConnectionPriority(EConnectionPriority eConnectionPriority)
        {
            return GetFunction<NativeRaiseConnectionPriorityE>(Functions.RaiseConnectionPriority45)(ObjectAddress,
                eConnectionPriority);
        }

        public void ResetConnectionPriority(int hRaiseConnectionPriorityPrev)
        {
            GetFunction<NativeResetConnectionPriorityI>(Functions.ResetConnectionPriority46)(ObjectAddress,
                hRaiseConnectionPriorityPrev);
        }

        public void SetCellId(uint cellId)
        {
            GetFunction<NativeSetCellIdu>(Functions.SetCellID47)(ObjectAddress, cellId);
        }

        public void TrackSteamUsageEvent(ESteamUsageEvent eSteamUsageEvent, byte[] pubKv)
        {
            GetFunction<NativeTrackSteamUsageEventEbu>(Functions.TrackSteamUsageEvent48)(ObjectAddress, eSteamUsageEvent,
                pubKv, (uint)pubKv.Length);
        }

        public void SetCountOfSimultaneousGuestUsersPerSteamAccount(int nCount)
        {
            GetFunction<NativeSetCountOfSimultaneousGuestUsersPerSteamAccountI>(
                Functions.SetCountOfSimultaneousGuestUsersPerSteamAccount49)(ObjectAddress, nCount);
        }

        public bool EnumerateConnectedUsers(int iterator, ref ConnectedUserInfoT pConnectedUserInfo)
        {
            return GetFunction<NativeEnumerateConnectedUsersIc>(Functions.EnumerateConnectedUsers50)(ObjectAddress,
                iterator, ref pConnectedUserInfo);
        }

        public ulong AssociateWithClan(CSteamId clanId)
        {
            return GetFunction<NativeAssociateWithClanC>(Functions.AssociateWithClan51)(ObjectAddress,
                clanId.ConvertToUint64());
        }

        public ulong ComputeNewPlayerCompatibility(CSteamId steamId)
        {
            return
                GetFunction<NativeComputeNewPlayerCompatibilityC>(Functions.ComputeNewPlayerCompatibility52)(
                    ObjectAddress, steamId.ConvertToUint64());
        }

        public bool _BGetUserAchievementStatus(CSteamId steamId, string pchAchievementName)
        {
            return GetFunction<NativeBGetUserAchievementStatusCs>(Functions._BGetUserAchievementStatus53)(
                ObjectAddress, steamId.ConvertToUint64(), pchAchievementName);
        }

        public void _GSSetSpawnCount(uint ucSpawn)
        {
            GetFunction<NativeGsSetSpawnCountU>(Functions._GSSetSpawnCount54)(ObjectAddress, ucSpawn);
        }

        public bool _GSGetSteam2GetEncryptionKeyToSendToNewClient(byte[] pvEncryptionKey, ref uint pcbEncryptionKey,
            uint cbMaxEncryptionKey)
        {
            return
                GetFunction<NativeGsGetSteam2GetEncryptionKeyToSendToNewClientBuu>(
                    Functions._GSGetSteam2GetEncryptionKeyToSendToNewClient55)(ObjectAddress, pvEncryptionKey,
                        ref pcbEncryptionKey, cbMaxEncryptionKey);
        }

        public bool _GSSendSteam2UserConnect(uint unUserId, byte[] pvRawKey, uint unIpPublic, ushort usPort,
            byte[] pvCookie)
        {
            return
                GetFunction<NativeGsSendSteam2UserConnectUbuuubu>(Functions._GSSendSteam2UserConnect56)(ObjectAddress,
                    unUserId, pvRawKey, (uint)pvRawKey.Length, unIpPublic, usPort, pvCookie, (uint)pvCookie.Length);
        }

        public bool _GSSendSteam3UserConnect(CSteamId steamId, uint unIpPublic, byte[] pvCookie)
        {
            return GetFunction<NativeGsSendSteam3UserConnectCubu>(Functions._GSSendSteam3UserConnect57)(ObjectAddress,
                steamId.ConvertToUint64(), unIpPublic, pvCookie, (uint)pvCookie.Length);
        }

        public bool _GSSendUserConnect(uint unUserId, uint unIpPublic, ushort usPort, byte[] pvCookie)
        {
            return GetFunction<NativeGsSendUserConnectUuubu>(Functions._GSSendUserConnect58)(ObjectAddress, unUserId,
                unIpPublic, usPort, pvCookie, (uint)pvCookie.Length);
        }

        public bool _GSRemoveUserConnect(uint unUserId)
        {
            return GetFunction<NativeGsRemoveUserConnectU>(Functions._GSRemoveUserConnect59)(ObjectAddress, unUserId);
        }

        public bool _GSUpdateStatus(int cPlayers, int cPlayersMax, int cBotPlayers, string pchServerName,
            string pSpectatorServerName, string pchMapName)
        {
            return GetFunction<NativeGsUpdateStatusIiisss>(Functions._GSUpdateStatus60)(ObjectAddress, cPlayers,
                cPlayersMax, cBotPlayers, pchServerName, pSpectatorServerName, pchMapName);
        }

        public bool _GSCreateUnauthenticatedUser(ref CSteamId pSteamId)
        {
            ulong s0 = 0;
            var result =
                GetFunction<NativeGsCreateUnauthenticatedUserC>(Functions._GSCreateUnauthenticatedUser61)(
                    ObjectAddress, ref s0);
            pSteamId = new CSteamId(s0);
            return result;
        }

        public bool _GSSetServerType(int iAppId, uint unServerFlags, uint unGameIp, ushort unGamePort,
            ushort unSpectatorPort, ushort usQueryPort, string pchGameDir, string pchVersion, bool bLanMode)
        {
            return GetFunction<NativeGsSetServerTypeIuuuuussb>(Functions._GSSetServerType62)(ObjectAddress, iAppId,
                unServerFlags, unGameIp, unGamePort, unSpectatorPort, usQueryPort, pchGameDir, pchVersion, bLanMode);
        }

        public void _SetBasicServerData(ushort nProtocolVersion, bool bDedicatedServer, string pRegionName,
            string pProductName, ushort nMaxReportedClients, bool bPasswordProtected, string pGameDescription)
        {
            GetFunction<NativeSetBasicServerDataUbssubs>(Functions._SetBasicServerData63)(ObjectAddress,
                nProtocolVersion, bDedicatedServer, pRegionName, pProductName, nMaxReportedClients, bPasswordProtected,
                pGameDescription);
        }

        public bool _GSSendUserDisconnect(CSteamId arg0, uint unUserId)
        {
            return GetFunction<NativeGsSendUserDisconnectCu>(Functions._GSSendUserDisconnect64)(ObjectAddress,
                arg0.ConvertToUint64(), unUserId);
        }

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeGetHSteamUser(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeInitGameServerUuuuus(
            IntPtr thisptr, uint unGameIp, ushort unGamePort, ushort usQueryPort, uint unServerFlags, uint nAppId,
            string pchVersion);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetProductS(IntPtr thisptr, string pchProductName);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetGameDescriptionS(IntPtr thisptr, string pchGameDescription);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetModDirS(IntPtr thisptr, string pchModDir);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetDedicatedServerB(
            IntPtr thisptr, [MarshalAs(UnmanagedType.I1)] bool bDedicatedServer);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeLogOnSs(IntPtr thisptr, string pchLogin, string pchPassword);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeLogOnAnonymous(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeLogOff(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeGetSteamId(IntPtr thisptr, ref ulong retarg);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBLoggedOn(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBSecure(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeWasRestartRequested(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetMaxPlayerCountI(IntPtr thisptr, int cPlayersMax);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetBotPlayerCountI(IntPtr thisptr, int cBotPlayers);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetServerNameS(IntPtr thisptr, string pchServerName);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetMapNameS(IntPtr thisptr, string pchMapName);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetPasswordProtectedB(
            IntPtr thisptr, [MarshalAs(UnmanagedType.I1)] bool bPasswordProtected);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetSpectatorPortU(IntPtr thisptr, ushort unSpectatorPort);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetSpectatorServerNameS(IntPtr thisptr, string pchSpectatorServerName);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeClearAllKeyValues(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetKeyValueSs(IntPtr thisptr, string pKey, string pValue);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetGameTagsS(IntPtr thisptr, string pchGameTags);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetGameDataS(IntPtr thisptr, string pchGameData);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetRegionS(IntPtr thisptr, string pchRegionName);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate EUserConnect NativeSendUserConnectAndAuthenticateUbuc(
            IntPtr thisptr, uint unIpClient, byte[] pvAuthBlob, uint cubAuthBlobSize, ref ulong pSteamIdUser);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeCreateUnauthenticatedUserConnection(IntPtr thisptr, ref ulong retarg);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSendUserDisconnectC(IntPtr thisptr, ulong steamIdUser);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBUpdateUserDataCsu(
            IntPtr thisptr, ulong steamIdUser, string pchPlayerName, uint uScore);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetAuthSessionTicketBiu(
            IntPtr thisptr, byte[] pTicket, int cbMaxTicket, ref uint pcbTicket);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate EBeginAuthSessionResult NativeBeginAuthSessionBic(
            IntPtr thisptr, byte[] pAuthTicket, int cbAuthTicket, ulong steamId);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeEndAuthSessionC(IntPtr thisptr, ulong steamId);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeCancelAuthTicketU(IntPtr thisptr, uint hAuthTicket);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate EUserHasLicenseForAppResult NativeIsUserSubscribedAppInTicketCu(
            IntPtr thisptr, ulong steamId, uint appId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeRequestUserGroupStatusCc(IntPtr thisptr, ulong steamIdUser, ulong steamIdGroup);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeGetGameplayStats(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ulong NativeGetServerReputation(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetPublicIp(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeHandleIncomingPacketBiuu(
            IntPtr thisptr, byte[] pData, int cbData, uint srcIp, ushort srcPort);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeGetNextOutgoingPacketBiuu(
            IntPtr thisptr, byte[] pOut, int cbMaxOut, ref uint pNetAdr, ref ushort pPort);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeEnableHeartbeatsB(IntPtr thisptr, [MarshalAs(UnmanagedType.I1)] bool bEnabled);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetHeartbeatIntervalI(IntPtr thisptr, int iInterval);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeForceHeartbeat(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ELogonState NativeGetLogonState(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBConnected(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeRaiseConnectionPriorityE(IntPtr thisptr, EConnectionPriority eConnectionPriority);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeResetConnectionPriorityI(IntPtr thisptr, int hRaiseConnectionPriorityPrev);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetCellIdu(IntPtr thisptr, uint cellId);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeTrackSteamUsageEventEbu(
            IntPtr thisptr, ESteamUsageEvent eSteamUsageEvent, byte[] pubKv, uint cubKv);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetCountOfSimultaneousGuestUsersPerSteamAccountI(IntPtr thisptr, int nCount);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeEnumerateConnectedUsersIc(
            IntPtr thisptr, int iterator, ref ConnectedUserInfoT pConnectedUserInfo);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ulong NativeAssociateWithClanC(IntPtr thisptr, ulong clanId);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ulong NativeComputeNewPlayerCompatibilityC(IntPtr thisptr, ulong steamId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBGetUserAchievementStatusCs(
            IntPtr thisptr, ulong steamId, string pchAchievementName);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeGsSetSpawnCountU(IntPtr thisptr, uint ucSpawn);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGsGetSteam2GetEncryptionKeyToSendToNewClientBuu(
            IntPtr thisptr, byte[] pvEncryptionKey, ref uint pcbEncryptionKey, uint cbMaxEncryptionKey);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGsSendSteam2UserConnectUbuuubu(
            IntPtr thisptr, uint unUserId, byte[] pvRawKey, uint unKeyLen, uint unIpPublic, ushort usPort,
            byte[] pvCookie, uint cubCookie);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGsSendSteam3UserConnectCubu(
            IntPtr thisptr, ulong steamId, uint unIpPublic, byte[] pvCookie, uint cubCookie);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGsSendUserConnectUuubu(
            IntPtr thisptr, uint unUserId, uint unIpPublic, ushort usPort, byte[] pvCookie, uint cubCookie);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGsRemoveUserConnectU(IntPtr thisptr, uint unUserId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGsUpdateStatusIiisss(
            IntPtr thisptr, int cPlayers, int cPlayersMax, int cBotPlayers, string pchServerName,
            string pSpectatorServerName, string pchMapName);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGsCreateUnauthenticatedUserC(IntPtr thisptr, ref ulong pSteamId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGsSetServerTypeIuuuuussb(
            IntPtr thisptr, int iAppId, uint unServerFlags, uint unGameIp, ushort unGamePort, ushort unSpectatorPort,
            ushort usQueryPort, string pchGameDir, string pchVersion, [MarshalAs(UnmanagedType.I1)] bool bLanMode);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetBasicServerDataUbssubs(
            IntPtr thisptr, ushort nProtocolVersion, [MarshalAs(UnmanagedType.I1)] bool bDedicatedServer,
            string pRegionName, string pProductName, ushort nMaxReportedClients,
            [MarshalAs(UnmanagedType.I1)] bool bPasswordProtected, string pGameDescription);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGsSendUserDisconnectCu(IntPtr thisptr, ulong arg0, uint unUserId);
    };
}