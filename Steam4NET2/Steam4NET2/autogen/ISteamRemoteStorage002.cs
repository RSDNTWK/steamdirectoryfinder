// This file is automatically generated.

using System;
using System.Runtime.InteropServices;

namespace Steam4Net
{
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public class SteamRemoteStorage002VTable
    {
        public IntPtr FileWrite0;
        public IntPtr GetFileSize1;
        public IntPtr FileRead2;
        public IntPtr FileExists3;
        public IntPtr GetFileCount4;
        public IntPtr GetFileNameAndSize5;
        public IntPtr GetQuota6;
        private IntPtr DTorISteamRemoteStorage0027;
    };

    [InteropHelp.InterfaceVersionAttribute("STEAMREMOTESTORAGE_INTERFACE_VERSION002")]
    public class SteamRemoteStorage002 : InteropHelp.NativeWrapper<SteamRemoteStorage002VTable>
    {
        public bool FileWrite(string pchFile, byte[] pvData)
        {
            return GetFunction<NativeFileWriteSbi>(Functions.FileWrite0)(ObjectAddress, pchFile, pvData, pvData.Length);
        }

        public int GetFileSize(string pchFile)
        {
            return GetFunction<NativeGetFileSizeS>(Functions.GetFileSize1)(ObjectAddress, pchFile);
        }

        public int FileRead(string pchFile, byte[] pvData)
        {
            return GetFunction<NativeFileReadSbi>(Functions.FileRead2)(ObjectAddress, pchFile, pvData, pvData.Length);
        }

        public bool FileExists(string pchFile)
        {
            return GetFunction<NativeFileExistsS>(Functions.FileExists3)(ObjectAddress, pchFile);
        }

        public int GetFileCount()
        {
            return GetFunction<NativeGetFileCount>(Functions.GetFileCount4)(ObjectAddress);
        }

        public string GetFileNameAndSize(int iFile, ref int pnFileSizeInBytes)
        {
            return
                InteropHelp.DecodeAnsiReturn(
                    Marshal.PtrToStringAnsi(
                        GetFunction<NativeGetFileNameAndSizeIi>(Functions.GetFileNameAndSize5)(ObjectAddress, iFile,
                            ref pnFileSizeInBytes)));
        }

        public bool GetQuota(ref int pnTotalBytes, ref int puAvailableBytes)
        {
            return GetFunction<NativeGetQuotaIi>(Functions.GetQuota6)(ObjectAddress, ref pnTotalBytes,
                ref puAvailableBytes);
        }

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeFileWriteSbi(IntPtr thisptr, string pchFile, byte[] pvData, int cubData);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeGetFileSizeS(IntPtr thisptr, string pchFile);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeFileReadSbi(IntPtr thisptr, string pchFile, byte[] pvData, int cubDataToRead);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeFileExistsS(IntPtr thisptr, string pchFile);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeGetFileCount(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate IntPtr NativeGetFileNameAndSizeIi(IntPtr thisptr, int iFile, ref int pnFileSizeInBytes);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetQuotaIi(IntPtr thisptr, ref int pnTotalBytes, ref int puAvailableBytes);
    };
}