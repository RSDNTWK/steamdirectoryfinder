// This file is automatically generated.

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace Steam4Net
{
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public class ClientScreenshotsVTable
    {
        public IntPtr GetShortcutDisplayName0;
        public IntPtr SetShortcutDisplayName1;
        public IntPtr WriteScreenshot2;
        public IntPtr AddScreenshotToLibrary3;
        public IntPtr TriggerScreenshot4;
        public IntPtr RequestScreenshotFromGame5;
        public IntPtr SetLocation6;
        public IntPtr TagUser7;
        public IntPtr TagPublishedFile8;
        public IntPtr ResolvePath9;
        public IntPtr GetSizeOnDisk10;
        public IntPtr GetSizeInCloud11;
        public IntPtr IsPersisted12;
        public IntPtr GetNumGamesWithLocalScreenshots13;
        public IntPtr GetGameWithLocalScreenshots14;
        public IntPtr GetLocalScreenshotCount15;
        public IntPtr GetLocalScreenshot16;
        public IntPtr SetLocalScreenshotCaption17;
        public IntPtr SetLocalScreenshotPrivacy18;
        public IntPtr SetLocalScreenshotSpoiler19;
        public IntPtr StartBatch20;
        public IntPtr AddToBatch21;
        public IntPtr UploadBatch22;
        public IntPtr DeleteBatch23;
        public IntPtr CancelBatch24;
        public IntPtr RecoverOldScreenshots25;
        public IntPtr GetTaggedUserCount26;
        public IntPtr GetTaggedUser27;
        public IntPtr GetLocation28;
        public IntPtr GetTaggedPublishedFileCount29;
        public IntPtr GetTaggedPublishedFile30;
        private IntPtr DTorIClientScreenshots31;
    };

    [InteropHelp.InterfaceVersionAttribute("CLIENTSCREENSHOTS_INTERFACE_VERSION001")]
    public class ClientScreenshots : InteropHelp.NativeWrapper<ClientScreenshotsVTable>
    {
        public string GetShortcutDisplayName(CGameId gameId)
        {
            return
                InteropHelp.DecodeAnsiReturn(
                    Marshal.PtrToStringAnsi(
                        GetFunction<NativeGetShortcutDisplayNameC>(Functions.GetShortcutDisplayName0)(ObjectAddress,
                            gameId.ConvertToUint64())));
        }

        public void SetShortcutDisplayName(CGameId arg0, string cszName)
        {
            GetFunction<NativeSetShortcutDisplayNameCs>(Functions.SetShortcutDisplayName1)(ObjectAddress,
                arg0.ConvertToUint64(), cszName);
        }

        public uint WriteScreenshot(CGameId gameId, byte[] pubRgbData, int iWidth, int iHeight)
        {
            return GetFunction<NativeWriteScreenshotCbuii>(Functions.WriteScreenshot2)(ObjectAddress,
                gameId.ConvertToUint64(), pubRgbData, (uint)pubRgbData.Length, iWidth, iHeight);
        }

        public uint AddScreenshotToLibrary(CGameId gameId, string cszScreenshotPath, string cszThumbnailPath, int iWidth,
            int iHeight)
        {
            return GetFunction<NativeAddScreenshotToLibraryCssii>(Functions.AddScreenshotToLibrary3)(ObjectAddress,
                gameId.ConvertToUint64(), cszScreenshotPath, cszThumbnailPath, iWidth, iHeight);
        }

        public void TriggerScreenshot(CGameId gameId)
        {
            GetFunction<NativeTriggerScreenshotC>(Functions.TriggerScreenshot4)(ObjectAddress, gameId.ConvertToUint64());
        }

        public void RequestScreenshotFromGame(uint nAppId)
        {
            GetFunction<NativeRequestScreenshotFromGameU>(Functions.RequestScreenshotFromGame5)(ObjectAddress, nAppId);
        }

        public bool SetLocation(CGameId gameId, uint hScreenshot, string cszLocation)
        {
            return GetFunction<NativeSetLocationCus>(Functions.SetLocation6)(ObjectAddress, gameId.ConvertToUint64(),
                hScreenshot, cszLocation);
        }

        public bool TagUser(CGameId gameId, uint hScreenshot, CSteamId userId)
        {
            return GetFunction<NativeTagUserCuc>(Functions.TagUser7)(ObjectAddress, gameId.ConvertToUint64(),
                hScreenshot, userId.ConvertToUint64());
        }

        public bool TagPublishedFile(CGameId gameId, uint hScreenshot, ulong unPublishedFileId)
        {
            return GetFunction<NativeTagPublishedFileCuu>(Functions.TagPublishedFile8)(ObjectAddress,
                gameId.ConvertToUint64(), hScreenshot, unPublishedFileId);
        }

        public bool ResolvePath(CGameId gameId, uint hScreenshot, bool bUnk, StringBuilder szResolvedPath)
        {
            return GetFunction<NativeResolvePathCubsu>(Functions.ResolvePath9)(ObjectAddress, gameId.ConvertToUint64(),
                hScreenshot, bUnk, szResolvedPath, (uint)szResolvedPath.Capacity);
        }

        public uint GetSizeOnDisk(CGameId gameId, uint hScreenshot)
        {
            return GetFunction<NativeGetSizeOnDiskCu>(Functions.GetSizeOnDisk10)(ObjectAddress, gameId.ConvertToUint64(),
                hScreenshot);
        }

        public uint GetSizeInCloud(CGameId gameId, uint hScreenshot)
        {
            return GetFunction<NativeGetSizeInCloudCu>(Functions.GetSizeInCloud11)(ObjectAddress,
                gameId.ConvertToUint64(), hScreenshot);
        }

        public bool IsPersisted(CGameId gameId, uint hScreenshot)
        {
            return GetFunction<NativeIsPersistedCu>(Functions.IsPersisted12)(ObjectAddress, gameId.ConvertToUint64(),
                hScreenshot);
        }

        public int GetNumGamesWithLocalScreenshots()
        {
            return
                GetFunction<NativeGetNumGamesWithLocalScreenshots>(Functions.GetNumGamesWithLocalScreenshots13)(
                    ObjectAddress);
        }

        public CGameId GetGameWithLocalScreenshots(int iGameIndex)
        {
            ulong ret = 0;
            GetFunction<NativeGetGameWithLocalScreenshotsI>(Functions.GetGameWithLocalScreenshots14)(ObjectAddress,
                ref ret, iGameIndex);
            return new CGameId(ret);
        }

        public int GetLocalScreenshotCount(CGameId gameId)
        {
            return GetFunction<NativeGetLocalScreenshotCountC>(Functions.GetLocalScreenshotCount15)(ObjectAddress,
                gameId.ConvertToUint64());
        }

        public bool GetLocalScreenshot(CGameId gameId, int iScreenshotIndex, ref uint phScreenshot, ref int piWidth,
            ref int piHeight, ref uint puTimestamp, ref EucmFilePrivacyState pePrivacy, ref ulong pullFileId,
            StringBuilder pchCaption, ref bool pbSpoiler)
        {
            return GetFunction<NativeGetLocalScreenshotCiuiiueusub>(Functions.GetLocalScreenshot16)(ObjectAddress,
                gameId.ConvertToUint64(), iScreenshotIndex, ref phScreenshot, ref piWidth, ref piHeight, ref puTimestamp,
                ref pePrivacy, ref pullFileId, pchCaption, (uint)pchCaption.Capacity, ref pbSpoiler);
        }

        public bool SetLocalScreenshotCaption(CGameId gameId, uint hScreenshot, string cszCaption)
        {
            return GetFunction<NativeSetLocalScreenshotCaptionCus>(Functions.SetLocalScreenshotCaption17)(
                ObjectAddress, gameId.ConvertToUint64(), hScreenshot, cszCaption);
        }

        public bool SetLocalScreenshotPrivacy(CGameId gameId, uint hScreenshot, EucmFilePrivacyState ePrivacy)
        {
            return GetFunction<NativeSetLocalScreenshotPrivacyCue>(Functions.SetLocalScreenshotPrivacy18)(
                ObjectAddress, gameId.ConvertToUint64(), hScreenshot, ePrivacy);
        }

        public bool SetLocalScreenshotSpoiler(CGameId arg0, uint hScreenshot, bool bSpoiler)
        {
            return GetFunction<NativeSetLocalScreenshotSpoilerCub>(Functions.SetLocalScreenshotSpoiler19)(
                ObjectAddress, arg0.ConvertToUint64(), hScreenshot, bSpoiler);
        }

        public bool StartBatch(CGameId gameId)
        {
            return GetFunction<NativeStartBatchC>(Functions.StartBatch20)(ObjectAddress, gameId.ConvertToUint64());
        }

        public bool AddToBatch(uint hScreenshot)
        {
            return GetFunction<NativeAddToBatchU>(Functions.AddToBatch21)(ObjectAddress, hScreenshot);
        }

        public ulong UploadBatch(EucmFilePrivacyState ePrivacy)
        {
            return GetFunction<NativeUploadBatchE>(Functions.UploadBatch22)(ObjectAddress, ePrivacy);
        }

        public ulong DeleteBatch(bool bDeleteFromCloud)
        {
            return GetFunction<NativeDeleteBatchB>(Functions.DeleteBatch23)(ObjectAddress, bDeleteFromCloud);
        }

        public bool CancelBatch()
        {
            return GetFunction<NativeCancelBatch>(Functions.CancelBatch24)(ObjectAddress);
        }

        public void RecoverOldScreenshots()
        {
            GetFunction<NativeRecoverOldScreenshots>(Functions.RecoverOldScreenshots25)(ObjectAddress);
        }

        public uint GetTaggedUserCount(CGameId gameId, uint hScreenshot)
        {
            return GetFunction<NativeGetTaggedUserCountCu>(Functions.GetTaggedUserCount26)(ObjectAddress,
                gameId.ConvertToUint64(), hScreenshot);
        }

        public CSteamId GetTaggedUser(CGameId gameId, uint hScreenshot, int iUserIndex)
        {
            ulong ret = 0;
            GetFunction<NativeGetTaggedUserCui>(Functions.GetTaggedUser27)(ObjectAddress, ref ret,
                gameId.ConvertToUint64(), hScreenshot, iUserIndex);
            return new CSteamId(ret);
        }

        public bool GetLocation(CGameId gameId, uint hScreenshot, StringBuilder pchLocation)
        {
            return GetFunction<NativeGetLocationCusu>(Functions.GetLocation28)(ObjectAddress, gameId.ConvertToUint64(),
                hScreenshot, pchLocation, (uint)pchLocation.Capacity);
        }

        public uint GetTaggedPublishedFileCount(CGameId gameId, uint hScreenshot)
        {
            return
                GetFunction<NativeGetTaggedPublishedFileCountCu>(Functions.GetTaggedPublishedFileCount29)(
                    ObjectAddress, gameId.ConvertToUint64(), hScreenshot);
        }

        public ulong GetTaggedPublishedFile(CGameId gameId, uint hScreenshot, int iPublishedFileIndex)
        {
            return GetFunction<NativeGetTaggedPublishedFileCui>(Functions.GetTaggedPublishedFile30)(ObjectAddress,
                gameId.ConvertToUint64(), hScreenshot, iPublishedFileIndex);
        }

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate IntPtr NativeGetShortcutDisplayNameC(IntPtr thisptr, ulong gameId);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetShortcutDisplayNameCs(IntPtr thisptr, ulong arg0, string cszName);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeWriteScreenshotCbuii(
            IntPtr thisptr, ulong gameId, byte[] pubRgbData, uint uRgbDataSize, int iWidth, int iHeight);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeAddScreenshotToLibraryCssii(
            IntPtr thisptr, ulong gameId, string cszScreenshotPath, string cszThumbnailPath, int iWidth, int iHeight);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeTriggerScreenshotC(IntPtr thisptr, ulong gameId);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeRequestScreenshotFromGameU(IntPtr thisptr, uint nAppId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSetLocationCus(IntPtr thisptr, ulong gameId, uint hScreenshot, string cszLocation);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeTagUserCuc(IntPtr thisptr, ulong gameId, uint hScreenshot, ulong userId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeTagPublishedFileCuu(
            IntPtr thisptr, ulong gameId, uint hScreenshot, ulong unPublishedFileId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeResolvePathCubsu(
            IntPtr thisptr, ulong gameId, uint hScreenshot, [MarshalAs(UnmanagedType.I1)] bool bUnk,
            StringBuilder szResolvedPath, uint cubResolvedPath);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetSizeOnDiskCu(IntPtr thisptr, ulong gameId, uint hScreenshot);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetSizeInCloudCu(IntPtr thisptr, ulong gameId, uint hScreenshot);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeIsPersistedCu(IntPtr thisptr, ulong gameId, uint hScreenshot);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeGetNumGamesWithLocalScreenshots(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeGetGameWithLocalScreenshotsI(IntPtr thisptr, ref ulong retarg, int iGameIndex);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeGetLocalScreenshotCountC(IntPtr thisptr, ulong gameId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetLocalScreenshotCiuiiueusub(
            IntPtr thisptr, ulong gameId, int iScreenshotIndex, ref uint phScreenshot, ref int piWidth, ref int piHeight,
            ref uint puTimestamp, ref EucmFilePrivacyState pePrivacy, ref ulong pullFileId, StringBuilder pchCaption,
            uint cubCaption, ref bool pbSpoiler);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSetLocalScreenshotCaptionCus(
            IntPtr thisptr, ulong gameId, uint hScreenshot, string cszCaption);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSetLocalScreenshotPrivacyCue(
            IntPtr thisptr, ulong gameId, uint hScreenshot, EucmFilePrivacyState ePrivacy);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSetLocalScreenshotSpoilerCub(
            IntPtr thisptr, ulong arg0, uint hScreenshot, [MarshalAs(UnmanagedType.I1)] bool bSpoiler);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeStartBatchC(IntPtr thisptr, ulong gameId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeAddToBatchU(IntPtr thisptr, uint hScreenshot);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ulong NativeUploadBatchE(IntPtr thisptr, EucmFilePrivacyState ePrivacy);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ulong NativeDeleteBatchB(IntPtr thisptr, [MarshalAs(UnmanagedType.I1)] bool bDeleteFromCloud);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeCancelBatch(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeRecoverOldScreenshots(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetTaggedUserCountCu(IntPtr thisptr, ulong gameId, uint hScreenshot);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeGetTaggedUserCui(
            IntPtr thisptr, ref ulong retarg, ulong gameId, uint hScreenshot, int iUserIndex);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetLocationCusu(
            IntPtr thisptr, ulong gameId, uint hScreenshot, StringBuilder pchLocation, uint cubLocation);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetTaggedPublishedFileCountCu(IntPtr thisptr, ulong gameId, uint hScreenshot);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate ulong NativeGetTaggedPublishedFileCui(
            IntPtr thisptr, ulong gameId, uint hScreenshot, int iPublishedFileIndex);
    };
}