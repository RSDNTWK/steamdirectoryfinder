// This file is automatically generated.

using System;
using System.Runtime.InteropServices;

namespace Steam4Net
{
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public class ClientNetworkingVTable
    {
        public IntPtr SendP2PPacket0;
        public IntPtr IsP2PPacketAvailable1;
        public IntPtr ReadP2PPacket2;
        public IntPtr AcceptP2PSessionWithUser3;
        public IntPtr CloseP2PSessionWithUser4;
        public IntPtr CloseP2PChannelWithUser5;
        public IntPtr GetP2PSessionState6;
        public IntPtr AllowP2PPacketRelay7;
        public IntPtr CreateListenSocket8;
        public IntPtr CreateP2PConnectionSocket9;
        public IntPtr CreateConnectionSocket10;
        public IntPtr DestroySocket11;
        public IntPtr DestroyListenSocket12;
        public IntPtr SendDataOnSocket13;
        public IntPtr IsDataAvailableOnSocket14;
        public IntPtr RetrieveDataFromSocket15;
        public IntPtr IsDataAvailable16;
        public IntPtr RetrieveData17;
        public IntPtr GetSocketInfo18;
        public IntPtr GetListenSocketInfo19;
        public IntPtr GetSocketConnectionType20;
        public IntPtr GetMaxPacketSize21;
        private IntPtr DTorIClientNetworking22;
    };

    [InteropHelp.InterfaceVersionAttribute("ClientNetworking001")]
    public class ClientNetworking : InteropHelp.NativeWrapper<ClientNetworkingVTable>
    {
        public bool SendP2PPacket(CSteamId steamIdRemote, byte[] pubData, Ep2PSend eP2PSendType, int iVirtualPort)
        {
            return GetFunction<NativeSendP2PPacketCbuei>(Functions.SendP2PPacket0)(ObjectAddress,
                steamIdRemote.ConvertToUint64(), pubData, (uint)pubData.Length, eP2PSendType, iVirtualPort);
        }

        public bool IsP2PPacketAvailable(ref uint pcubMsgSize, int iVirtualPort)
        {
            return GetFunction<NativeIsP2PPacketAvailableUi>(Functions.IsP2PPacketAvailable1)(ObjectAddress,
                ref pcubMsgSize, iVirtualPort);
        }

        public bool ReadP2PPacket(byte[] pubDest, ref uint pcubMsgSize, ref CSteamId psteamIdRemote, int iVirtualPort)
        {
            ulong s0 = 0;
            var result = GetFunction<NativeReadP2PPacketBuuci>(Functions.ReadP2PPacket2)(ObjectAddress, pubDest,
                (uint)pubDest.Length, ref pcubMsgSize, ref s0, iVirtualPort);
            psteamIdRemote = new CSteamId(s0);
            return result;
        }

        public bool AcceptP2PSessionWithUser(CSteamId steamIdRemote)
        {
            return GetFunction<NativeAcceptP2PSessionWithUserC>(Functions.AcceptP2PSessionWithUser3)(ObjectAddress,
                steamIdRemote.ConvertToUint64());
        }

        public bool CloseP2PSessionWithUser(CSteamId steamIdRemote)
        {
            return GetFunction<NativeCloseP2PSessionWithUserC>(Functions.CloseP2PSessionWithUser4)(ObjectAddress,
                steamIdRemote.ConvertToUint64());
        }

        public bool CloseP2PChannelWithUser(CSteamId steamIdRemote, int iVirtualPort)
        {
            return GetFunction<NativeCloseP2PChannelWithUserCi>(Functions.CloseP2PChannelWithUser5)(ObjectAddress,
                steamIdRemote.ConvertToUint64(), iVirtualPort);
        }

        public bool GetP2PSessionState(CSteamId steamIdRemote, ref P2PSessionStateT pConnectionState)
        {
            return GetFunction<NativeGetP2PSessionStateCp>(Functions.GetP2PSessionState6)(ObjectAddress,
                steamIdRemote.ConvertToUint64(), ref pConnectionState);
        }

        public bool AllowP2PPacketRelay(bool bAllow)
        {
            return GetFunction<NativeAllowP2PPacketRelayB>(Functions.AllowP2PPacketRelay7)(ObjectAddress, bAllow);
        }

        public uint CreateListenSocket(int nVirtualP2PPort, uint nIp, ushort nPort, bool bAllowUseOfPacketRelay)
        {
            return GetFunction<NativeCreateListenSocketIuub>(Functions.CreateListenSocket8)(ObjectAddress,
                nVirtualP2PPort, nIp, nPort, bAllowUseOfPacketRelay);
        }

        public uint CreateP2PConnectionSocket(CSteamId steamIdTarget, int nVirtualPort, int nTimeoutSec,
            bool bAllowUseOfPacketRelay)
        {
            return GetFunction<NativeCreateP2PConnectionSocketCiib>(Functions.CreateP2PConnectionSocket9)(
                ObjectAddress, steamIdTarget.ConvertToUint64(), nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
        }

        public uint CreateConnectionSocket(uint nIp, ushort nPort, int nTimeoutSec)
        {
            return GetFunction<NativeCreateConnectionSocketUui>(Functions.CreateConnectionSocket10)(ObjectAddress, nIp,
                nPort, nTimeoutSec);
        }

        public bool DestroySocket(uint hSocket, bool bNotifyRemoteEnd)
        {
            return GetFunction<NativeDestroySocketUb>(Functions.DestroySocket11)(ObjectAddress, hSocket,
                bNotifyRemoteEnd);
        }

        public bool DestroyListenSocket(uint hSocket, bool bNotifyRemoteEnd)
        {
            return GetFunction<NativeDestroyListenSocketUb>(Functions.DestroyListenSocket12)(ObjectAddress, hSocket,
                bNotifyRemoteEnd);
        }

        public bool SendDataOnSocket(uint hSocket, byte[] pubData, bool bReliable)
        {
            return GetFunction<NativeSendDataOnSocketUbub>(Functions.SendDataOnSocket13)(ObjectAddress, hSocket, pubData,
                (uint)pubData.Length, bReliable);
        }

        public bool IsDataAvailableOnSocket(uint hSocket, ref uint pcubMsgSize)
        {
            return GetFunction<NativeIsDataAvailableOnSocketUu>(Functions.IsDataAvailableOnSocket14)(ObjectAddress,
                hSocket, ref pcubMsgSize);
        }

        public bool RetrieveDataFromSocket(uint hSocket, byte[] pubDest, ref uint pcubMsgSize)
        {
            return GetFunction<NativeRetrieveDataFromSocketUbuu>(Functions.RetrieveDataFromSocket15)(ObjectAddress,
                hSocket, pubDest, (uint)pubDest.Length, ref pcubMsgSize);
        }

        public bool IsDataAvailable(uint hListenSocket, ref uint pcubMsgSize, ref uint phSocket)
        {
            return GetFunction<NativeIsDataAvailableUuu>(Functions.IsDataAvailable16)(ObjectAddress, hListenSocket,
                ref pcubMsgSize, ref phSocket);
        }

        public bool RetrieveData(uint hListenSocket, byte[] pubDest, ref uint pcubMsgSize, ref uint phSocket)
        {
            return GetFunction<NativeRetrieveDataUbuuu>(Functions.RetrieveData17)(ObjectAddress, hListenSocket, pubDest,
                (uint)pubDest.Length, ref pcubMsgSize, ref phSocket);
        }

        public bool GetSocketInfo(uint hSocket, ref CSteamId pSteamIdRemote, ref int peSocketStatus,
            ref uint punIpRemote, ref ushort punPortRemote)
        {
            ulong s0 = 0;
            var result = GetFunction<NativeGetSocketInfoUciuu>(Functions.GetSocketInfo18)(ObjectAddress, hSocket, ref s0,
                ref peSocketStatus, ref punIpRemote, ref punPortRemote);
            pSteamIdRemote = new CSteamId(s0);
            return result;
        }

        public bool GetListenSocketInfo(uint hListenSocket, ref uint pnIp, ref ushort pnPort)
        {
            return GetFunction<NativeGetListenSocketInfoUuu>(Functions.GetListenSocketInfo19)(ObjectAddress,
                hListenSocket, ref pnIp, ref pnPort);
        }

        public EsNetSocketConnectionType GetSocketConnectionType(uint hSocket)
        {
            return GetFunction<NativeGetSocketConnectionTypeU>(Functions.GetSocketConnectionType20)(ObjectAddress,
                hSocket);
        }

        public int GetMaxPacketSize(uint hSocket)
        {
            return GetFunction<NativeGetMaxPacketSizeU>(Functions.GetMaxPacketSize21)(ObjectAddress, hSocket);
        }

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSendP2PPacketCbuei(
            IntPtr thisptr, ulong steamIdRemote, byte[] pubData, uint cubData, Ep2PSend eP2PSendType, int iVirtualPort);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeIsP2PPacketAvailableUi(IntPtr thisptr, ref uint pcubMsgSize, int iVirtualPort);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeReadP2PPacketBuuci(
            IntPtr thisptr, byte[] pubDest, uint cubDest, ref uint pcubMsgSize, ref ulong psteamIdRemote,
            int iVirtualPort);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeAcceptP2PSessionWithUserC(IntPtr thisptr, ulong steamIdRemote);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeCloseP2PSessionWithUserC(IntPtr thisptr, ulong steamIdRemote);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeCloseP2PChannelWithUserCi(IntPtr thisptr, ulong steamIdRemote, int iVirtualPort);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetP2PSessionStateCp(
            IntPtr thisptr, ulong steamIdRemote, ref P2PSessionStateT pConnectionState);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeAllowP2PPacketRelayB(IntPtr thisptr, [MarshalAs(UnmanagedType.I1)] bool bAllow);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeCreateListenSocketIuub(
            IntPtr thisptr, int nVirtualP2PPort, uint nIp, ushort nPort,
            [MarshalAs(UnmanagedType.I1)] bool bAllowUseOfPacketRelay);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeCreateP2PConnectionSocketCiib(
            IntPtr thisptr, ulong steamIdTarget, int nVirtualPort, int nTimeoutSec,
            [MarshalAs(UnmanagedType.I1)] bool bAllowUseOfPacketRelay);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeCreateConnectionSocketUui(IntPtr thisptr, uint nIp, ushort nPort, int nTimeoutSec);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeDestroySocketUb(
            IntPtr thisptr, uint hSocket, [MarshalAs(UnmanagedType.I1)] bool bNotifyRemoteEnd);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeDestroyListenSocketUb(
            IntPtr thisptr, uint hSocket, [MarshalAs(UnmanagedType.I1)] bool bNotifyRemoteEnd);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSendDataOnSocketUbub(
            IntPtr thisptr, uint hSocket, byte[] pubData, uint cubData, [MarshalAs(UnmanagedType.I1)] bool bReliable);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeIsDataAvailableOnSocketUu(IntPtr thisptr, uint hSocket, ref uint pcubMsgSize);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeRetrieveDataFromSocketUbuu(
            IntPtr thisptr, uint hSocket, byte[] pubDest, uint cubDest, ref uint pcubMsgSize);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeIsDataAvailableUuu(
            IntPtr thisptr, uint hListenSocket, ref uint pcubMsgSize, ref uint phSocket);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeRetrieveDataUbuuu(
            IntPtr thisptr, uint hListenSocket, byte[] pubDest, uint cubDest, ref uint pcubMsgSize, ref uint phSocket);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetSocketInfoUciuu(
            IntPtr thisptr, uint hSocket, ref ulong pSteamIdRemote, ref int peSocketStatus, ref uint punIpRemote,
            ref ushort punPortRemote);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetListenSocketInfoUuu(
            IntPtr thisptr, uint hListenSocket, ref uint pnIp, ref ushort pnPort);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate EsNetSocketConnectionType NativeGetSocketConnectionTypeU(IntPtr thisptr, uint hSocket);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeGetMaxPacketSizeU(IntPtr thisptr, uint hSocket);
    };
}