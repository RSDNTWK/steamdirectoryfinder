// This file is automatically generated.

using System;
using System.Runtime.InteropServices;

namespace Steam4Net
{
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public class SteamNetworking001VTable
    {
        public IntPtr CreateListenSocket0;
        public IntPtr CreateP2PConnectionSocket1;
        public IntPtr CreateConnectionSocket2;
        public IntPtr DestroySocket3;
        public IntPtr DestroyListenSocket4;
        public IntPtr SendDataOnSocket5;
        public IntPtr IsDataAvailableOnSocket6;
        public IntPtr RetrieveDataFromSocket7;
        public IntPtr IsDataAvailable8;
        public IntPtr RetrieveData9;
        public IntPtr GetSocketInfo10;
        public IntPtr GetListenSocketInfo11;
        private IntPtr DTorISteamNetworking00112;
    };

    [InteropHelp.InterfaceVersionAttribute("SteamNetworking001")]
    public class SteamNetworking001 : InteropHelp.NativeWrapper<SteamNetworking001VTable>
    {
        public uint CreateListenSocket(int nVirtualP2PPort, uint nIp, ushort nPort)
        {
            return GetFunction<NativeCreateListenSocketIuu>(Functions.CreateListenSocket0)(ObjectAddress,
                nVirtualP2PPort, nIp, nPort);
        }

        public uint CreateP2PConnectionSocket(CSteamId steamIdTarget, int nVirtualPort, int nTimeoutSec)
        {
            return GetFunction<NativeCreateP2PConnectionSocketCii>(Functions.CreateP2PConnectionSocket1)(ObjectAddress,
                steamIdTarget.ConvertToUint64(), nVirtualPort, nTimeoutSec);
        }

        public uint CreateConnectionSocket(uint nIp, ushort nPort, int nTimeoutSec)
        {
            return GetFunction<NativeCreateConnectionSocketUui>(Functions.CreateConnectionSocket2)(ObjectAddress, nIp,
                nPort, nTimeoutSec);
        }

        public bool DestroySocket(uint hSocket, bool bNotifyRemoteEnd)
        {
            return GetFunction<NativeDestroySocketUb>(Functions.DestroySocket3)(ObjectAddress, hSocket, bNotifyRemoteEnd);
        }

        public bool DestroyListenSocket(uint hSocket, bool bNotifyRemoteEnd)
        {
            return GetFunction<NativeDestroyListenSocketUb>(Functions.DestroyListenSocket4)(ObjectAddress, hSocket,
                bNotifyRemoteEnd);
        }

        public bool SendDataOnSocket(uint hSocket, byte[] pubData, bool bReliable)
        {
            return GetFunction<NativeSendDataOnSocketUbub>(Functions.SendDataOnSocket5)(ObjectAddress, hSocket, pubData,
                (uint)pubData.Length, bReliable);
        }

        public bool IsDataAvailableOnSocket(uint hSocket, ref uint pcubMsgSize)
        {
            return GetFunction<NativeIsDataAvailableOnSocketUu>(Functions.IsDataAvailableOnSocket6)(ObjectAddress,
                hSocket, ref pcubMsgSize);
        }

        public bool RetrieveDataFromSocket(uint hSocket, byte[] pubDest, ref uint pcubMsgSize)
        {
            return GetFunction<NativeRetrieveDataFromSocketUbuu>(Functions.RetrieveDataFromSocket7)(ObjectAddress,
                hSocket, pubDest, (uint)pubDest.Length, ref pcubMsgSize);
        }

        public bool IsDataAvailable(uint hListenSocket, ref uint pcubMsgSize, ref uint phSocket)
        {
            return GetFunction<NativeIsDataAvailableUuu>(Functions.IsDataAvailable8)(ObjectAddress, hListenSocket,
                ref pcubMsgSize, ref phSocket);
        }

        public bool RetrieveData(uint hListenSocket, byte[] pubDest, ref uint pcubMsgSize)
        {
            return GetFunction<NativeRetrieveDataUbuu>(Functions.RetrieveData9)(ObjectAddress, hListenSocket, pubDest,
                (uint)pubDest.Length, ref pcubMsgSize);
        }

        public bool GetSocketInfo(uint hSocket, ref CSteamId pSteamIdRemote, ref int peSocketStatus,
            ref uint punIpRemote, ref ushort punPortRemote)
        {
            ulong s0 = 0;
            var result = GetFunction<NativeGetSocketInfoUciuu>(Functions.GetSocketInfo10)(ObjectAddress, hSocket, ref s0,
                ref peSocketStatus, ref punIpRemote, ref punPortRemote);
            pSteamIdRemote = new CSteamId(s0);
            return result;
        }

        public bool GetListenSocketInfo(uint hListenSocket, ref uint pnIp, ref ushort pnPort)
        {
            return GetFunction<NativeGetListenSocketInfoUuu>(Functions.GetListenSocketInfo11)(ObjectAddress,
                hListenSocket, ref pnIp, ref pnPort);
        }

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeCreateListenSocketIuu(IntPtr thisptr, int nVirtualP2PPort, uint nIp, ushort nPort);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeCreateP2PConnectionSocketCii(
            IntPtr thisptr, ulong steamIdTarget, int nVirtualPort, int nTimeoutSec);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeCreateConnectionSocketUui(IntPtr thisptr, uint nIp, ushort nPort, int nTimeoutSec);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeDestroySocketUb(
            IntPtr thisptr, uint hSocket, [MarshalAs(UnmanagedType.I1)] bool bNotifyRemoteEnd);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeDestroyListenSocketUb(
            IntPtr thisptr, uint hSocket, [MarshalAs(UnmanagedType.I1)] bool bNotifyRemoteEnd);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSendDataOnSocketUbub(
            IntPtr thisptr, uint hSocket, byte[] pubData, uint cubData, [MarshalAs(UnmanagedType.I1)] bool bReliable);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeIsDataAvailableOnSocketUu(IntPtr thisptr, uint hSocket, ref uint pcubMsgSize);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeRetrieveDataFromSocketUbuu(
            IntPtr thisptr, uint hSocket, byte[] pubDest, uint cubDest, ref uint pcubMsgSize);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeIsDataAvailableUuu(
            IntPtr thisptr, uint hListenSocket, ref uint pcubMsgSize, ref uint phSocket);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeRetrieveDataUbuu(
            IntPtr thisptr, uint hListenSocket, byte[] pubDest, uint cubDest, ref uint pcubMsgSize);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetSocketInfoUciuu(
            IntPtr thisptr, uint hSocket, ref ulong pSteamIdRemote, ref int peSocketStatus, ref uint punIpRemote,
            ref ushort punPortRemote);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetListenSocketInfoUuu(
            IntPtr thisptr, uint hListenSocket, ref uint pnIp, ref ushort pnPort);
    };
}