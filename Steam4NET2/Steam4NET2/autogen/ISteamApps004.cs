// This file is automatically generated.

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace Steam4Net
{
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public class SteamApps004VTable
    {
        public IntPtr BIsSubscribed0;
        public IntPtr BIsLowViolence1;
        public IntPtr BIsCybercafe2;
        public IntPtr BIsVACBanned3;
        public IntPtr GetCurrentGameLanguage4;
        public IntPtr GetAvailableGameLanguages5;
        public IntPtr BIsSubscribedApp6;
        public IntPtr BIsDlcInstalled7;
        public IntPtr GetEarliestPurchaseUnixTime8;
        public IntPtr BIsSubscribedFromFreeWeekend9;
        public IntPtr GetDLCCount10;
        public IntPtr BGetDLCDataByIndex11;
        public IntPtr InstallDLC12;
        public IntPtr UninstallDLC13;
        private IntPtr DTorISteamApps00414;
    };

    [InteropHelp.InterfaceVersionAttribute("STEAMAPPS_INTERFACE_VERSION004")]
    public class SteamApps004 : InteropHelp.NativeWrapper<SteamApps004VTable>
    {
        public bool BIsSubscribed()
        {
            return GetFunction<NativeBIsSubscribed>(Functions.BIsSubscribed0)(ObjectAddress);
        }

        public bool BIsLowViolence()
        {
            return GetFunction<NativeBIsLowViolence>(Functions.BIsLowViolence1)(ObjectAddress);
        }

        public bool BIsCybercafe()
        {
            return GetFunction<NativeBIsCybercafe>(Functions.BIsCybercafe2)(ObjectAddress);
        }

        public bool BisVacBanned()
        {
            return GetFunction<NativeBisVacBanned>(Functions.BIsVACBanned3)(ObjectAddress);
        }

        public string GetCurrentGameLanguage()
        {
            return
                InteropHelp.DecodeAnsiReturn(
                    Marshal.PtrToStringAnsi(
                        GetFunction<NativeGetCurrentGameLanguage>(Functions.GetCurrentGameLanguage4)(ObjectAddress)));
        }

        public string GetAvailableGameLanguages()
        {
            return
                InteropHelp.DecodeAnsiReturn(
                    Marshal.PtrToStringAnsi(
                        GetFunction<NativeGetAvailableGameLanguages>(Functions.GetAvailableGameLanguages5)(ObjectAddress)));
        }

        public bool BIsSubscribedApp(uint nAppId)
        {
            return GetFunction<NativeBIsSubscribedAppU>(Functions.BIsSubscribedApp6)(ObjectAddress, nAppId);
        }

        public bool BIsDlcInstalled(uint nAppId)
        {
            return GetFunction<NativeBIsDlcInstalledU>(Functions.BIsDlcInstalled7)(ObjectAddress, nAppId);
        }

        public uint GetEarliestPurchaseUnixTime(uint nAppId)
        {
            return GetFunction<NativeGetEarliestPurchaseUnixTimeU>(Functions.GetEarliestPurchaseUnixTime8)(
                ObjectAddress, nAppId);
        }

        public bool BIsSubscribedFromFreeWeekend()
        {
            return
                GetFunction<NativeBIsSubscribedFromFreeWeekend>(Functions.BIsSubscribedFromFreeWeekend9)(ObjectAddress);
        }

        public int GetDlcCount()
        {
            return GetFunction<NativeGetDlcCount>(Functions.GetDLCCount10)(ObjectAddress);
        }

        public bool BGetDlcDataByIndex(int iDlc, ref uint pAppId, ref bool pbAvailable, StringBuilder pchName)
        {
            return GetFunction<NativeBGetDlcDataByIndexIubsi>(Functions.BGetDLCDataByIndex11)(ObjectAddress, iDlc,
                ref pAppId, ref pbAvailable, pchName, pchName.Capacity);
        }

        public void InstallDlc(uint nAppId)
        {
            GetFunction<NativeInstallDlcu>(Functions.InstallDLC12)(ObjectAddress, nAppId);
        }

        public void UninstallDlc(uint nAppId)
        {
            GetFunction<NativeUninstallDlcu>(Functions.UninstallDLC13)(ObjectAddress, nAppId);
        }

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBIsSubscribed(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBIsLowViolence(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBIsCybercafe(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBisVacBanned(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate IntPtr NativeGetCurrentGameLanguage(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate IntPtr NativeGetAvailableGameLanguages(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBIsSubscribedAppU(IntPtr thisptr, uint nAppId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBIsDlcInstalledU(IntPtr thisptr, uint nAppId);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetEarliestPurchaseUnixTimeU(IntPtr thisptr, uint nAppId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBIsSubscribedFromFreeWeekend(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate int NativeGetDlcCount(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBGetDlcDataByIndexIubsi(
            IntPtr thisptr, int iDlc, ref uint pAppId, ref bool pbAvailable, StringBuilder pchName,
            int cchNameBufferSize);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeInstallDlcu(IntPtr thisptr, uint nAppId);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeUninstallDlcu(IntPtr thisptr, uint nAppId);
    };
}