// This file is automatically generated.

using System;
using System.Runtime.InteropServices;

namespace Steam4Net
{
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public class SteamGameServer002VTable
    {
        public IntPtr LogOn0;
        public IntPtr LogOff1;
        public IntPtr BLoggedOn2;
        public IntPtr SetSpawnCount3;
        public IntPtr GetSteam2GetEncryptionKeyToSendToNewClient4;
        public IntPtr SendSteam2UserConnect5;
        public IntPtr SendSteam3UserConnect6;
        public IntPtr RemoveUserConnect7;
        public IntPtr SendUserDisconnect8;
        public IntPtr SendUserStatusResponse9;
        public IntPtr Obsolete_GSSetStatus10;
        public IntPtr UpdateStatus11;
        public IntPtr BSecure12;
        public IntPtr GetSteamID13;
        public IntPtr SetServerType14;
        public IntPtr SetServerType215;
        public IntPtr UpdateStatus216;
        public IntPtr CreateUnauthenticatedUser17;
        public IntPtr SetUserData18;
        public IntPtr UpdateSpectatorPort19;
        public IntPtr SetGameType20;
        private IntPtr DTorISteamGameServer00221;
    };

    [InteropHelp.InterfaceVersionAttribute("SteamGameServer002")]
    public class SteamGameServer002 : InteropHelp.NativeWrapper<SteamGameServer002VTable>
    {
        public void LogOn()
        {
            GetFunction<NativeLogOn>(Functions.LogOn0)(ObjectAddress);
        }

        public void LogOff()
        {
            GetFunction<NativeLogOff>(Functions.LogOff1)(ObjectAddress);
        }

        public bool BLoggedOn()
        {
            return GetFunction<NativeBLoggedOn>(Functions.BLoggedOn2)(ObjectAddress);
        }

        public void SetSpawnCount(uint ucSpawn)
        {
            GetFunction<NativeSetSpawnCountU>(Functions.SetSpawnCount3)(ObjectAddress, ucSpawn);
        }

        public bool GetSteam2GetEncryptionKeyToSendToNewClient(byte[] pvEncryptionKey, ref uint pcbEncryptionKey,
            uint cbMaxEncryptionKey)
        {
            return
                GetFunction<NativeGetSteam2GetEncryptionKeyToSendToNewClientBuu>(
                    Functions.GetSteam2GetEncryptionKeyToSendToNewClient4)(ObjectAddress, pvEncryptionKey,
                        ref pcbEncryptionKey, cbMaxEncryptionKey);
        }

        public bool SendSteam2UserConnect(uint unUserId, byte[] pvRawKey, uint unIpPublic, ushort usPort,
            byte[] pvCookie)
        {
            return GetFunction<NativeSendSteam2UserConnectUbuuubu>(Functions.SendSteam2UserConnect5)(ObjectAddress,
                unUserId, pvRawKey, (uint)pvRawKey.Length, unIpPublic, usPort, pvCookie, (uint)pvCookie.Length);
        }

        public bool SendSteam3UserConnect(CSteamId steamId, uint unIpPublic, byte[] pvCookie)
        {
            return GetFunction<NativeSendSteam3UserConnectCubu>(Functions.SendSteam3UserConnect6)(ObjectAddress,
                steamId.ConvertToUint64(), unIpPublic, pvCookie, (uint)pvCookie.Length);
        }

        public bool RemoveUserConnect(uint unUserId)
        {
            return GetFunction<NativeRemoveUserConnectU>(Functions.RemoveUserConnect7)(ObjectAddress, unUserId);
        }

        public bool SendUserDisconnect(CSteamId steamId, uint unUserId)
        {
            return GetFunction<NativeSendUserDisconnectCu>(Functions.SendUserDisconnect8)(ObjectAddress,
                steamId.ConvertToUint64(), unUserId);
        }

        public bool SendUserStatusResponse(CSteamId steamId, int nSecondsConnected, int nSecondsSinceLast)
        {
            return GetFunction<NativeSendUserStatusResponseCii>(Functions.SendUserStatusResponse9)(ObjectAddress,
                steamId.ConvertToUint64(), nSecondsConnected, nSecondsSinceLast);
        }

        public bool Obsolete_GSSetStatus(int nAppIdServed, uint unServerFlags, int cPlayers, int cPlayersMax,
            int cBotPlayers, int unGamePort, string pchServerName, string pchGameDir, string pchMapName,
            string pchVersion)
        {
            return GetFunction<NativeObsoleteGsSetStatusIuiiiissss>(Functions.Obsolete_GSSetStatus10)(ObjectAddress,
                nAppIdServed, unServerFlags, cPlayers, cPlayersMax, cBotPlayers, unGamePort, pchServerName, pchGameDir,
                pchMapName, pchVersion);
        }

        public bool UpdateStatus(int cPlayers, int cPlayersMax, int cBotPlayers, string pchServerName, string pchMapName)
        {
            return GetFunction<NativeUpdateStatusIiiss>(Functions.UpdateStatus11)(ObjectAddress, cPlayers, cPlayersMax,
                cBotPlayers, pchServerName, pchMapName);
        }

        public bool BSecure()
        {
            return GetFunction<NativeBSecure>(Functions.BSecure12)(ObjectAddress);
        }

        public CSteamId GetSteamId()
        {
            ulong ret = 0;
            GetFunction<NativeGetSteamId>(Functions.GetSteamID13)(ObjectAddress, ref ret);
            return new CSteamId(ret);
        }

        public bool SetServerType(int nGameAppId, uint unServerFlags, uint unGameIp, uint unGamePort, string pchGameDir,
            string pchVersion)
        {
            return GetFunction<NativeSetServerTypeIuuuss>(Functions.SetServerType14)(ObjectAddress, nGameAppId,
                unServerFlags, unGameIp, unGamePort, pchGameDir, pchVersion);
        }

        public bool SetServerType2(int nGameAppId, uint unServerFlags, uint unGameIp, ushort unGamePort,
            ushort usSpectatorPort, ushort usQueryPort, string pchGameDir, string pchVersion, bool bLanMode)
        {
            return GetFunction<NativeSetServerType2Iuuuuussb>(Functions.SetServerType215)(ObjectAddress, nGameAppId,
                unServerFlags, unGameIp, unGamePort, usSpectatorPort, usQueryPort, pchGameDir, pchVersion, bLanMode);
        }

        public bool UpdateStatus2(int cPlayers, int cPlayersMax, int cBotPlayers, string pchServerName,
            string pSpectatorServerName, string pchMapName)
        {
            return GetFunction<NativeUpdateStatus2Iiisss>(Functions.UpdateStatus216)(ObjectAddress, cPlayers,
                cPlayersMax, cBotPlayers, pchServerName, pSpectatorServerName, pchMapName);
        }

        public bool CreateUnauthenticatedUser(ref CSteamId pSteamId)
        {
            ulong s0 = 0;
            var result =
                GetFunction<NativeCreateUnauthenticatedUserC>(Functions.CreateUnauthenticatedUser17)(ObjectAddress,
                    ref s0);
            pSteamId = new CSteamId(s0);
            return result;
        }

        public bool SetUserData(CSteamId steamIdUser, string pchPlayerName, uint uScore)
        {
            return GetFunction<NativeSetUserDataCsu>(Functions.SetUserData18)(ObjectAddress,
                steamIdUser.ConvertToUint64(), pchPlayerName, uScore);
        }

        public void UpdateSpectatorPort(ushort unSpectatorPort)
        {
            GetFunction<NativeUpdateSpectatorPortU>(Functions.UpdateSpectatorPort19)(ObjectAddress, unSpectatorPort);
        }

        public void SetGameType(string pchGameType)
        {
            GetFunction<NativeSetGameTypeS>(Functions.SetGameType20)(ObjectAddress, pchGameType);
        }

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeLogOn(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeLogOff(IntPtr thisptr);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBLoggedOn(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetSpawnCountU(IntPtr thisptr, uint ucSpawn);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetSteam2GetEncryptionKeyToSendToNewClientBuu(
            IntPtr thisptr, byte[] pvEncryptionKey, ref uint pcbEncryptionKey, uint cbMaxEncryptionKey);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSendSteam2UserConnectUbuuubu(
            IntPtr thisptr, uint unUserId, byte[] pvRawKey, uint unKeyLen, uint unIpPublic, ushort usPort,
            byte[] pvCookie, uint cubCookie);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSendSteam3UserConnectCubu(
            IntPtr thisptr, ulong steamId, uint unIpPublic, byte[] pvCookie, uint cubCookie);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeRemoveUserConnectU(IntPtr thisptr, uint unUserId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSendUserDisconnectCu(IntPtr thisptr, ulong steamId, uint unUserId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSendUserStatusResponseCii(
            IntPtr thisptr, ulong steamId, int nSecondsConnected, int nSecondsSinceLast);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeObsoleteGsSetStatusIuiiiissss(
            IntPtr thisptr, int nAppIdServed, uint unServerFlags, int cPlayers, int cPlayersMax, int cBotPlayers,
            int unGamePort, string pchServerName, string pchGameDir, string pchMapName, string pchVersion);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeUpdateStatusIiiss(
            IntPtr thisptr, int cPlayers, int cPlayersMax, int cBotPlayers, string pchServerName, string pchMapName);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeBSecure(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeGetSteamId(IntPtr thisptr, ref ulong retarg);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSetServerTypeIuuuss(
            IntPtr thisptr, int nGameAppId, uint unServerFlags, uint unGameIp, uint unGamePort, string pchGameDir,
            string pchVersion);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSetServerType2Iuuuuussb(
            IntPtr thisptr, int nGameAppId, uint unServerFlags, uint unGameIp, ushort unGamePort, ushort usSpectatorPort,
            ushort usQueryPort, string pchGameDir, string pchVersion, [MarshalAs(UnmanagedType.I1)] bool bLanMode);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeUpdateStatus2Iiisss(
            IntPtr thisptr, int cPlayers, int cPlayersMax, int cBotPlayers, string pchServerName,
            string pSpectatorServerName, string pchMapName);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeCreateUnauthenticatedUserC(IntPtr thisptr, ref ulong pSteamId);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeSetUserDataCsu(IntPtr thisptr, ulong steamIdUser, string pchPlayerName, uint uScore);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeUpdateSpectatorPortU(IntPtr thisptr, ushort unSpectatorPort);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate void NativeSetGameTypeS(IntPtr thisptr, string pchGameType);
    };
}