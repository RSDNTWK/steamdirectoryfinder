// This file is automatically generated.

using System;
using System.Runtime.InteropServices;

namespace Steam4Net
{
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public class SteamRemoteStorage001VTable
    {
        public IntPtr FileWrite0;
        public IntPtr GetFileSize1;
        public IntPtr FileRead2;
        public IntPtr FileExists3;
        public IntPtr FileDelete4;
        public IntPtr GetFileCount5;
        public IntPtr GetFileNameAndSize6;
        public IntPtr GetQuota7;
        private IntPtr DTorISteamRemoteStorage0018;
    };

    [InteropHelp.InterfaceVersionAttribute("STEAMREMOTESTORAGE_INTERFACE_VERSION001")]
    public class SteamRemoteStorage001 : InteropHelp.NativeWrapper<SteamRemoteStorage001VTable>
    {
        public bool FileWrite(string filename, byte[] data, int arg2)
        {
            return GetFunction<NativeFileWriteSbi>(Functions.FileWrite0)(ObjectAddress, filename, data, arg2);
        }

        public uint GetFileSize(string filename)
        {
            return GetFunction<NativeGetFileSizeS>(Functions.GetFileSize1)(ObjectAddress, filename);
        }

        public bool FileRead(string filename, byte[] buffer, int size)
        {
            return GetFunction<NativeFileReadSbi>(Functions.FileRead2)(ObjectAddress, filename, buffer, size);
        }

        public bool FileExists(string filename)
        {
            return GetFunction<NativeFileExistsS>(Functions.FileExists3)(ObjectAddress, filename);
        }

        public bool FileDelete(string filename)
        {
            return GetFunction<NativeFileDeleteS>(Functions.FileDelete4)(ObjectAddress, filename);
        }

        public uint GetFileCount()
        {
            return GetFunction<NativeGetFileCount>(Functions.GetFileCount5)(ObjectAddress);
        }

        public string GetFileNameAndSize(int index, ref int size)
        {
            return
                InteropHelp.DecodeAnsiReturn(
                    Marshal.PtrToStringAnsi(
                        GetFunction<NativeGetFileNameAndSizeIi>(Functions.GetFileNameAndSize6)(ObjectAddress, index,
                            ref size)));
        }

        public bool GetQuota(ref int current, ref int maximum)
        {
            return GetFunction<NativeGetQuotaIi>(Functions.GetQuota7)(ObjectAddress, ref current, ref maximum);
        }

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeFileWriteSbi(IntPtr thisptr, string filename, byte[] data, int arg2);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetFileSizeS(IntPtr thisptr, string filename);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeFileReadSbi(IntPtr thisptr, string filename, byte[] buffer, int size);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeFileExistsS(IntPtr thisptr, string filename);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeFileDeleteS(IntPtr thisptr, string filename);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate uint NativeGetFileCount(IntPtr thisptr);

        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate IntPtr NativeGetFileNameAndSizeIi(IntPtr thisptr, int index, ref int size);

        [return: MarshalAs(UnmanagedType.I1)]
        [UnmanagedFunctionPointer(CallingConvention.ThisCall)]
        private delegate bool NativeGetQuotaIi(IntPtr thisptr, ref int current, ref int maximum);
    };
}