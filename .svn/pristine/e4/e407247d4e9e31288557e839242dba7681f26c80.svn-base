using System;
using System.Collections.Generic;
using System.Text;
using Steam4NET;
using System.IO;
using System.Diagnostics;
using System.Net;
using System.Threading;
using System.Windows.Forms;
namespace steamdirectoryfinder
{
    class Program
    {
        public static uint desination = 218;
        public static String destinationlocationbase = "";
        public static int[] games = { 220, 240, 280, 300, 340, 380, 420 };
        public static void Perfominitializations()
        {
            Console.BackgroundColor = ConsoleColor.Black;
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            Console.Title = "Source Sdk 2007 fud";
        }
        public static bool CheckifClientOrServer()
        {
            String output;
            Console.WriteLine("Please specify if client or server");
            output = Console.ReadLine();
            if (output.ToLower() == "client")
            {
                return true;
            }
            else if (output.ToLower() == "server")
            {
                return false;
            }
            else
            {
                Console.WriteLine("Error server or client not found exiting.");
                System.Environment.Exit(1);
                return true;
            }
        }
        public static String PutIntoQuotes(String value)
        {
            return "\"" + value + "\"";
        }

        public static void InstallServer(String username, String password, String serverdirectory)
        {
            String endofcmd = "validate +quit";
            String basecmd = " +login " + username + " " + password +" "+ " +force_install_dir " + serverdirectory + " +app_update ";
            Performtasks("steamcmd.exe", basecmd + "220 " + endofcmd);
            Performtasks("steamcmd.exe", basecmd + "380 " + endofcmd);
            Performtasks("steamcmd.exe", basecmd + "340 " + endofcmd);
            Performtasks("steamcmd.exe", basecmd + "420 " + endofcmd);
            Performtasks("steamcmd.exe", basecmd + "280 " + endofcmd);
            Performtasks("steamcmd.exe", basecmd + "240 " + endofcmd);
            Performtasks("steamcmd.exe", basecmd + "300 " + endofcmd);
            Performtasks("steamcmd.exe", basecmd + "310 " + endofcmd);
        }
        public static void ExtractClientResources()
        {
            File.WriteAllBytes("HLExtract.exe", steamdirectoryfinder.Properties.Resources.HLExtract);
            File.WriteAllBytes("HLLib.dll", steamdirectoryfinder.Properties.Resources.HLLib);
            // File.WriteAllBytes("Steam4NET.dll", steamdirectoryfinder.Properties.Resources.Steam4NET_dll);
        }
        public static void SetupClient()
        {
            ExtractClientResources();
            Steamstuff.Init();
        }
        public static void Shutdown()
        {
            Steamstuff.Shutdown();
            File.Delete("HLExtract.exe");
            File.Delete("HLLib.dll");
        }
        public static String gamename(uint a)
        {
            StringBuilder sb = new StringBuilder(256);
            int len = Steamstuff.SteamApps2.GetAppData(a, "name", sb);

            string name = sb.ToString();
            return name;
        }
        public static void Performtasks(String prog, String ass)
        {
            Process task = new Process();
            task.StartInfo.UseShellExecute = false;
            task.StartInfo.RedirectStandardOutput = true;
            task.StartInfo.CreateNoWindow = true;
            task.StartInfo.FileName = prog;
            task.StartInfo.Arguments = ass;
            task.Start();

            task.OutputDataReceived += (sender, e) => Console.WriteLine(e.Data);
            task.BeginOutputReadLine();
            task.WaitForExit();
            Console.SetIn(new StreamReader(Console.OpenStandardInput()));
        }
        public static void Tasks(String ass)
        {
            String QuotedVpk = PutIntoQuotes(ass);
            String Vpkwithoutextend = ass;
            Vpkwithoutextend = Vpkwithoutextend.Remove(Vpkwithoutextend.IndexOf('.'));
            String Gamedir = Path.GetDirectoryName(Vpkwithoutextend);
            String Xcopyargs = PutIntoQuotes(Gamedir + "\\root\\*") + " " + PutIntoQuotes(Gamedir + "\\") + " /f /s /i /y";
            String HLExtractargs = "-p " + QuotedVpk + " -d " + PutIntoQuotes(Gamedir) + " " + "-e \"\"";
            Performtasks("HLExtract.exe", HLExtractargs);

            Performtasks("xcopy", Xcopyargs);
            Directory.Delete(Gamedir + "\\root", true);
            //Performtasks("rd", "/q /s " )
        }
        public static String[] Returndirvpks(String dir)
        {
            var vpkfiles = Directory.GetFiles(dir, "*_dir.vpk", SearchOption.AllDirectories);
            return vpkfiles;
        }
        public static void Runoneachvpk(String[] ass, bool keepvpk)
        {
            foreach (String abb in ass)
            {
                Tasks(abb);
                if (keepvpk == false)
                {
                    DeleteFile(abb);
                }
            }
        }
        public static void DeleteFile(string fun)
        {
            try
            {
                File.Delete(fun);
            }
            catch (System.IO.DirectoryNotFoundException dbz)
            {
                System.Console.WriteLine("opps" + dbz);
            }
        }
        public static void DeleteDir(String fun, bool hex)
        {
            try
            {
                Directory.Delete(fun, hex);
            }
            catch (System.IO.DirectoryNotFoundException dbz)
            {
                System.Console.WriteLine("opps" + dbz);
            }
        }
        [STAThread]
        public static void Main(String[] args)
        {
            Perfominitializations();
            if (args.Length == 0)
            {
                OpenMenuIfnocmdArguments();
            }
            else if (args[0].ToLower().Contains("-client"))
            {
                if (args.Length == 2)
                {
                    if (args[1].ToLower().Contains("-deletevpks"))
                    {
                        Client(false);
                    }
                }
                else
                {
                    Client(true);
                }
            }
            else if (args[0].ToLower().Contains("-server"))
            {
                destinationlocationbase = args[1];
                Server();
            }
        }

        private static void OpenMenuIfnocmdArguments()
        {
            bool Choice = CheckifClientOrServer();
            if (Choice == true)
            {
                Client(true);
            }
            else
            {
                Server();
            }
        }

        private static void Server()
        {
            Server_Configuration serverform = new Server_Configuration();
            serverform.ShowDialog();


            //throw new NotImplementedException();
        }

        private static void Client(bool keepvpksonc)
        {
            SetupClient();
            StringBuilder mypath = new StringBuilder(25555);
            Steamstuff.SteamApps.GetAppInstallDir(desination, mypath);
            destinationlocationbase = mypath.ToString();
            foreach (uint a in games)
            {

                Steamstuff.SteamApps.GetAppInstallDir(a, mypath);
                if (gamename(a) == "Half-Life 2")
                {
                    DeleteDir(destinationlocationbase + "\\hl2", true);
                    Runoneachvpk(Returndirvpks(mypath + "\\hl2"), keepvpksonc);
                    otherstuff.CreateSymbolicLink(destinationlocationbase + "\\hl2", mypath + "\\hl2", otherstuff.SYMBOLIC_LINK_FLAG.Directory);
                    Console.WriteLine(mypath + "\\hl2");
                    Console.WriteLine(destinationlocationbase + "\\hl2");
                }
                else if (gamename(a) == "Day of Defeat: Source")
                {
                    DeleteDir(destinationlocationbase + "\\dod", false);
                    Runoneachvpk(Returndirvpks(mypath + "\\dod"), keepvpksonc);
                    otherstuff.CreateSymbolicLink(destinationlocationbase + "\\dod", mypath + "\\dod", otherstuff.SYMBOLIC_LINK_FLAG.Directory);
                    Console.WriteLine(mypath + "\\dod");
                    Console.WriteLine(destinationlocationbase + "\\dod");
                    File.Create(Directory.GetCurrentDirectory() + "\\mounts\\dod");
                }
                else if (gamename(a) == "Counter-Strike: Source")
                {

                    DeleteDir(destinationlocationbase + "\\cstrike", false);
                    Runoneachvpk(Returndirvpks(mypath + "\\cstrike"), keepvpksonc);
                    otherstuff.CreateSymbolicLink(destinationlocationbase + "\\cstrike", mypath + "\\cstrike", otherstuff.SYMBOLIC_LINK_FLAG.Directory);
                    Console.WriteLine(mypath + "\\cstrike");
                    Console.WriteLine(destinationlocationbase + "\\cstrike");
                    File.Create(Directory.GetCurrentDirectory() + "\\mounts\\css");
                }
                else if (gamename(a) == "Half-Life: Source")
                {

                    DeleteDir(destinationlocationbase + "\\hl1", false);
                    Runoneachvpk(Returndirvpks(mypath + "\\hl1"), keepvpksonc);
                    otherstuff.CreateSymbolicLink(destinationlocationbase + "\\hl1", mypath + "\\hl1", otherstuff.SYMBOLIC_LINK_FLAG.Directory);
                    Console.WriteLine(mypath + "\\hl1");
                    Console.WriteLine(destinationlocationbase + "\\hl1");
                    File.Create(Directory.GetCurrentDirectory() + "\\mounts\\hls");
                }
                else if (gamename(a) == "Half-Life 2: Lost Coast")
                {
                    DeleteDir(destinationlocationbase + "\\lostcoast", false);
                    Runoneachvpk(Returndirvpks(mypath + "\\lostcoast"), keepvpksonc);
                    otherstuff.CreateSymbolicLink(destinationlocationbase + "\\lostcoast", mypath + "\\lostcoast", otherstuff.SYMBOLIC_LINK_FLAG.Directory);
                    Console.WriteLine(mypath + "\\lostcoast");
                    Console.WriteLine(destinationlocationbase + "\\lostcoast");
                    File.Create(Directory.GetCurrentDirectory() + "\\mounts\\lostcoast");
                }
                else if (gamename(a) == "Half-Life 2: Episode One")
                {
                    DeleteDir(destinationlocationbase + "\\episodic", false);
                    Runoneachvpk(Returndirvpks(mypath + "\\episodic"), keepvpksonc);
                    otherstuff.CreateSymbolicLink(destinationlocationbase + "\\episodic", mypath + "\\episodic", otherstuff.SYMBOLIC_LINK_FLAG.Directory);
                    Console.WriteLine(mypath + "\\episodic");
                    Console.WriteLine(destinationlocationbase + "\\episodic");
                    File.Create(Directory.GetCurrentDirectory() + "\\mounts\\episodic");
                }
                else if (gamename(a) == "Half-Life 2: Episode Two")
                {
                    DeleteDir(destinationlocationbase + "\\ep2", false);
                    Runoneachvpk(Returndirvpks(mypath + "\\ep2"), keepvpksonc);
                    otherstuff.CreateSymbolicLink(destinationlocationbase + "\\ep2", mypath + "\\ep2", otherstuff.SYMBOLIC_LINK_FLAG.Directory);
                    Console.WriteLine(mypath + "\\ep2");
                    Console.WriteLine(destinationlocationbase + "\\ep2");
                    File.Create(Directory.GetCurrentDirectory() + "\\mounts\\ep2");
                }
                else
                {
                    Console.WriteLine(gamename(a) + mypath);
                }

            }
            //Console.ReadKey();
            Shutdown();
        }
    }
}
