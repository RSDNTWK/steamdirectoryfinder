using System;
using System.IO;
using System.Net;
using System.Windows.Forms;
using steamdirectoryfinder.Properties;

namespace steamdirectoryfinder
{
    public partial class ServerConfiguration : Form
    {
        public static string ServerInstallPath;

        public ServerConfiguration(String path)
        {
            InitializeComponent();
            ServerInstallPath = path;
        }

        public static void InstallServer(string username, string password, string serverdirectory)
        {
            var endofcmd = "validate +quit";
            var basecmd = " +login " + username + " " + password + " +force_install_dir " + serverdirectory +
                          " +app_update ";
            var steamcmdbase = Directory.GetCurrentDirectory() +"\\steamcmd" + "\\steamcmd.exe";
            Program.Performtasks(steamcmdbase, basecmd + "220 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "380 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "340 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "420 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "280 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "240 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "300 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "310 " + endofcmd);
        }

        public static void DownloadSteamcmd()
        {
            using (var client = new WebClient())
            {
                client.DownloadFile("http://media.steampowered.com/installer/steamcmd.zip", "steamcmd.zip");
                // client.DownloadFile("http://www.gsptalk.com/mirror/sourcemod/mmsource-1.10.4-windows.zip", "mmsource.zip");
                //client.DownloadFile("http://www.gsptalk.com/mirror/sourcemod/sourcemod-1.7.1-windows.zip","sourcemod.zip");
            }
        }

        public static void CheckifDirectoryexistsorcreateit(String fun)
        {
            Directory.CreateDirectory(fun);
        }
        public static void ExtractServerResources()
        {
            File.WriteAllBytes("7za.exe", Resources._7za);
            Program.Performtasks("7za.exe", "x steamcmd.zip -o" + Program.PutIntoQuotes(Directory.GetCurrentDirectory() +"\\steamcmd"));
            //Performtasks("7za.exe","x mmsource.zip -o "+ fun);
            //Performtasks("7za.exe", "x sourcemod.zip -o " + fun);
        }
        private void ServerConfiguration_Load(object sender, EventArgs e)
        {

        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            CheckifDirectoryexistsorcreateit(ServerInstallPath);
            CheckifDirectoryexistsorcreateit(Directory.GetCurrentDirectory()+"\\steamcmd");
            DownloadSteamcmd();
            ExtractServerResources();
            InstallServer(textBox1.Text, textBox2.Text, Directory.GetParent(ServerInstallPath).FullName);
            Program.ExtractClientResources();
            Program.Runoneachvpk(Program.Returndirvpks(Directory.GetParent(ServerInstallPath).FullName));
            Program.DeleteVpks(Program.Returnallvpks(Directory.GetParent(ServerInstallPath).FullName));
            Program.DeleteFile(Directory.GetParent(ServerInstallPath).FullName+"\\hl2\\maps\\d2_coast_02.bsp");
            Program.DeleteFile(Directory.GetParent(ServerInstallPath).FullName+"\\hl1\\maps\\c4a1y.bsp");
            Program.DeleteDir(Directory.GetParent(ServerInstallPath).FullName + "\\demo",true);
            Program.DeleteDir(Directory.GetParent(ServerInstallPath).FullName + "\\drivers", true);
            Program.DeleteDir(Directory.GetParent(ServerInstallPath).FullName + "\\hl1_hd", true);
            Program.DeleteDir(Directory.GetParent(ServerInstallPath).FullName + "\\resources", true);
            Program.DeleteDir(Directory.GetParent(ServerInstallPath).FullName + "\\Soundtrack", true);
            Program.DeleteDir(Directory.GetParent(ServerInstallPath).FullName + "\\sourcetest",true);
            Program.DeleteDir(Directory.GetParent(ServerInstallPath).FullName + "\\tools", true);
            var binfolder = Directory.GetFiles(Directory.GetParent(ServerInstallPath).FullName + "\\bin");
            foreach (String ass in binfolder)
            {
                if (!ass.EndsWith("AdminServer.dll") || !ass.EndsWith("binkw32.dll") || ass.EndsWith("datacache.dll") ||
                    !ass.EndsWith("datamodel.dll") ||
                    !ass.EndsWith("dedicated.dll") || !ass.EndsWith("dmserializers.dll") || !ass.EndsWith("engine.dll") ||
                    !ass.EndsWith("inputsystem.dll") ||
                    !ass.EndsWith("MaterialSystem.dll") || !ass.EndsWith("parsifal.dll") ||
                    !ass.EndsWith("scenefilecache.dll") || !ass.EndsWith("shaderapiempty.dll") ||
                    !ass.EndsWith("SoundEmitterSystem.dll") || !ass.EndsWith("stdshader_dbg.dll") ||
                    !ass.EndsWith("stdshader_dx6.dll") || !ass.EndsWith("stdshader_dx7.dll") ||
                    !ass.EndsWith("stdshader_dx8.dll") || !ass.EndsWith("stdshader_dx9.dll") ||
                    !ass.EndsWith("steam_api.dll") || !ass.EndsWith("StudioRender.dll") ||
                    !ass.EndsWith("tier0.dll") || !ass.EndsWith("vgui2.dll") || !ass.EndsWith("vphysics.dll") ||
                    !ass.EndsWith("vstdlib.dll"))
                {
                    Program.DeleteFile(ass);
                }
            }

        }
    }
}