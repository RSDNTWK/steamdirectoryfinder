using Microsoft.Win32;
using steamdirectoryfinder.Properties;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices.ComTypes;
using System.Text;
using System.Threading.Tasks;
using Steam4NET;

namespace steamdirectoryfinder
{
    internal static class Program
    {
        public static uint SourceSdk2007Id = 218;
        public static string Sourcesdk2007Installationpath = "";
        public static readonly uint[] Requiredmountids = { 220, 240, 280, 300, 340, 380, 420 };

        public static void Perfominitializations()
        {
            Console.BackgroundColor = ConsoleColor.Black;
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            Console.Title = @"Source Sdk 2007 fud";
        }

        public static bool CheckifClientOrServer()
        {
            Console.WriteLine(@"Please specify if client or server");
            string output = Console.ReadLine();
            if (output != null && output.ToLower() == "client")
            {
                return true;
            }
            if (output != null && output.ToLower() == "server")
            {
                return false;
            }
            Console.WriteLine(@"Error server or client not found exiting.");
            Environment.Exit(1);
            return true;
        }

        public static string PutIntoQuotes(string value)
        {
            return "\"" + value + "\"";
        }

        public static void ExtractClientResources()
        {
            File.WriteAllBytes("HLExtract.exe", Resources.HLExtract);
            File.WriteAllBytes("HLLib.dll", Resources.HLLib);
            // File.WriteAllBytes("Steam4NET.dll", steamdirectoryfinder.Properties.Resources.Steam4NET_dll);
        }

        public static void SetupClient()
        {
            ExtractClientResources();
            Steamstuff.InitClient();
        }

        public static void Shutdown()
        {
            Steamstuff.Shutdown();
            File.Delete("HLExtract.exe");
            File.Delete("HLLib.dll");
        }

        public static string Gamename(uint a)
        {
            var sb = new StringBuilder(256);
            Steamstuff.SteamApps2.GetAppData(a, "name", sb);

            var name = sb.ToString();
            return name;
        }

        public static void Performtasks(string prog, string ass, bool hookshit = false)
        {
            var task = new Process
            {
                StartInfo =
                {
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    CreateNoWindow = true,
                    FileName = prog,
                    Arguments = ass
                }
            };
            task.Start();
            task.OutputDataReceived += (sender, e) => Console.WriteLine(e.Data);
            task.BeginOutputReadLine();
            task.WaitForExit();
            if (hookshit)
            {
                Steamstuff.InitServer(Directory.GetCurrentDirectory() + "\\steamcmd");
                Console.WriteLine(Steamstuff.SteamUser.GetSteamID().Render());
            }
            Console.SetIn(new StreamReader(Console.OpenStandardInput()));
        }

        public static void Tasks(string ass)
        {
            var quotedVpk = PutIntoQuotes(ass);
            var vpkwithoutextend = ass;
            vpkwithoutextend = vpkwithoutextend.Remove(vpkwithoutextend.IndexOf('.'));
            var gamedir = Path.GetDirectoryName(vpkwithoutextend);
            var xcopyargs = PutIntoQuotes(gamedir + "\\root\\*") + " " + PutIntoQuotes(gamedir + "\\") + " /f /s /i /y";
            var hlExtractargs = "-p " + quotedVpk + " -d " + PutIntoQuotes(gamedir) + " " + "-e \"\"";
            Performtasks("HLExtract.exe", hlExtractargs);

            Performtasks("xcopy", xcopyargs);
            Directory.Delete(gamedir + "\\root", true);
            //Performtasks("rd", "/q /s " )
        }

        public static string[] Returnallvpks(String dir)
        {
            return Directory.GetFiles(dir, "*.vpk", SearchOption.AllDirectories);
        }

        public static string[] Returndirvpks(string dir)
        {
            var vpkfiles = Directory.GetFiles(dir, "*_dir.vpk", SearchOption.AllDirectories);
            Array.Sort(vpkfiles, StringComparer.InvariantCulture);
            return vpkfiles;
        }

        public static void DeleteVpks(IEnumerable<string> ass)
        {
            foreach (var avv in ass)
            {
                if (!avv.Contains("platform"))
                {
                    DeleteFile(avv);
                }
            }
        }

        public static void Runoneachvpk(IEnumerable<string> ass)
        {
            foreach (var avv in ass)
                if (!avv.Contains("platform"))
                {
                    Tasks(avv);
                }
        }

        public static void DeleteFile(string fun)
        {
            try
            {
                File.Delete(fun);
            }
            catch (DirectoryNotFoundException)
            {
                Console.WriteLine(@"opps File not found");
            }
        }

        public static void DeleteDir(string fun, bool hex)
        {
            try
            {
                Directory.Delete(fun, hex);
            }
            catch (DirectoryNotFoundException)
            {
                Console.WriteLine(@"opps Directory not Found");
            }
        }

        [STAThread]
        public static void Main(string[] args)
        {
            using (var cc = new ConsoleCopy("mylogfile.txt"))
            {
                Perfominitializations();
                if (args.Length == 0)
                {
                    OpenMenuIfnocmdArguments();
                }
                else if (args[0].ToLower().Contains("-client"))
                {
                    Client();
                    Shutdown();
                }
                else if (args[0].ToLower().Contains("-server"))
                {
                    if (args.Length < 4)
                    {
                        Server(args[1]);
                    }
                    else if (args.Length == 4)
                    {
                        Server(args[1], args[2], args[3]);
                    }
                }
            }
        }

        private static void OpenMenuIfnocmdArguments()
        {
            var choice = CheckifClientOrServer();
            if (choice)
            {
                Client();
            }
            else
            {
                Console.WriteLine(@"Please provide the oc server install path subdirectory");
                Server(Console.ReadLine());
            }
        }

        private static void Server(string installpath)
        {
            if (installpath != null)
            {
                var serverform = new ServerConfiguration(installpath);
                serverform.ShowDialog();
            }
            else
            {
                Console.WriteLine(@"Please specify where to install the server");
                var serverform = new ServerConfiguration(Console.ReadLine());
                serverform.ShowDialog();
            }

            //throw new NotImplementedException();
        }

        private static void Server(string installpath, string username, string password)
        {
            var fun = new ServerStuff(installpath, username, password);
            fun.RunFun();
        }

        private class ClientMount
        {
            private uint gameid;
            private String game;
            private StringBuilder mypath;
                //store the sourcesdk2007 path seporately so it can be called throughout the program
            private string Sourcesdk2007Installationpath;
            private string ocinstall;
            public ClientMount(uint id)
            {
                gameid = id;
                mypath = new StringBuilder(256);
                Steamstuff.SteamApps.GetAppInstallDir(218, mypath);
                Sourcesdk2007Installationpath = mypath.ToString();
                Steamstuff.SteamApps.GetAppInstallDir(gameid, mypath);
            }

            public void installmount()
            {
                ocinstall = Registry.CurrentUser.OpenSubKey("Software\\Valve\\Steam").GetValue("SourceModInstallPath")+ "\\obsidian";
                if (gameid == 220)
                {
                    game = "\\hl2";
                }
                else if (gameid == 240)
                {
                    game = "\\cstrike";
                }
                else if (gameid == 280)
                {
                    game = "\\hl1";
                }
                else if (gameid == 300)
                {
                    game = "\\dod";
                }
                else if (gameid == 340)
                {
                    game = "\\lostcoast";
                }
                else if (gameid == 380)
                {
                    game = "\\episodic";
                }
                else if (gameid == 420)
                {
                    game = "\\ep2";
                }
                DeleteDir(Sourcesdk2007Installationpath + game, false);
                Runoneachvpk(Returndirvpks(mypath + game));
                Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + game, mypath + game,
                    Otherstuff.SymbolicLinkFlag.Directory);
                Console.WriteLine(mypath + game);
                Console.WriteLine(Sourcesdk2007Installationpath + game);
                if (game != "\\hl2")
                {
                    File.Create(ocinstall + "\\mounts" + game);
                }else if (game == "\\hl1")
                {
                    File.Create(ocinstall + "\\mounts\\hls");
                }
            }
        }

        private static void Client()
        {
            SetupClient();
            try
            {

                Parallel.ForEach(Requiredmountids, (mymount) =>
                {
                    uint mount = mymount;
                    ClientMount tehMount = new ClientMount(mount);
                    tehMount.installmount();
                });
            }
            catch (AggregateException e)
            {
                throw e.InnerException;
            }
    }
        //private static void Client()
        //{
        //    var key = Registry.CurrentUser.OpenSubKey("Software\\Valve\\Steam");
        //    if (key != null)
        //    {
        //        var ocinstall = key.GetValue("SourceModInstallPath") + "\\obsidian";
        //        //initalize the steam api binding code.
        //        SetupClient();
        //        //mypath is used to store the location of the game installation directory
        //        var mypath = new StringBuilder(25555);
        //        //use the steam api to read the location of the source sdk 2007 directory
        //        Steamstuff.SteamApps.GetAppInstallDir(SourceSdk2007Id, mypath);
        //        //store the sourcesdk2007 path seporately so it can be called throughout the program
        //        Sourcesdk2007Installationpath = mypath.ToString();
        //        foreach (var mymount in Requiredmountids)
        //        {
        //            Steamstuff.SteamApps.GetAppInstallDir(mymount, mypath);
        //            switch (Gamename(mymount))
        //            {
        //                case "Half-Life 2":
        //                    DeleteDir(Sourcesdk2007Installationpath + "\\hl2", true);
        //                    Runoneachvpk(Returndirvpks(mypath + "\\hl2"));
        //                    Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + "\\hl2", mypath + "\\hl2",
        //                        Otherstuff.SymbolicLinkFlag.Directory);
        //                    Console.WriteLine(mypath + "\\hl2");
        //                    Console.WriteLine(Sourcesdk2007Installationpath + "\\hl2");
        //                    break;

        //                case "Day of Defeat: Source":
        //                    DeleteDir(Sourcesdk2007Installationpath + "\\dod", false);
        //                    Runoneachvpk(Returndirvpks(mypath + "\\dod"));
        //                    Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + "\\dod", mypath + "\\dod",
        //                        Otherstuff.SymbolicLinkFlag.Directory);
        //                    Console.WriteLine(mypath + "\\dod");
        //                    Console.WriteLine(Sourcesdk2007Installationpath + "\\dod");
        //                    File.Create(ocinstall + "\\mounts\\dod");
        //                    break;

        //                case "Counter-Strike: Source":
        //                    DeleteDir(Sourcesdk2007Installationpath + "\\cstrike", false);
        //                    Runoneachvpk(Returndirvpks(mypath + "\\cstrike"));
        //                    Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + "\\cstrike", mypath + "\\cstrike",
        //                        Otherstuff.SymbolicLinkFlag.Directory);
        //                    Console.WriteLine(mypath + "\\cstrike");
        //                    Console.WriteLine(Sourcesdk2007Installationpath + "\\cstrike");
        //                    File.Create(ocinstall + "\\mounts\\css");
        //                    break;

        //                case "Half-Life: Source":
        //                    DeleteDir(Sourcesdk2007Installationpath + "\\hl1", false);
        //                    Runoneachvpk(Returndirvpks(mypath + "\\hl1"));
        //                    Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + "\\hl1", mypath + "\\hl1",
        //                        Otherstuff.SymbolicLinkFlag.Directory);
        //                    Console.WriteLine(mypath + "\\hl1");
        //                    Console.WriteLine(Sourcesdk2007Installationpath + "\\hl1");
        //                    File.Create(ocinstall + "\\mounts\\hls");
        //                    break;

        //                case "Half-Life 2: Lost Coast":
        //                    DeleteDir(Sourcesdk2007Installationpath + "\\lostcoast", false);
        //                    Runoneachvpk(Returndirvpks(mypath + "\\lostcoast"));
        //                    Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + "\\lostcoast", mypath + "\\lostcoast",
        //                        Otherstuff.SymbolicLinkFlag.Directory);
        //                    Console.WriteLine(mypath + "\\lostcoast");
        //                    Console.WriteLine(Sourcesdk2007Installationpath + "\\lostcoast");
        //                    File.Create(ocinstall + "\\mounts\\lostcoast");
        //                    break;

        //                case "Half-Life 2: Episode One":
        //                    DeleteDir(Sourcesdk2007Installationpath + "\\episodic", false);
        //                    Runoneachvpk(Returndirvpks(mypath + "\\episodic"));
        //                    Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + "\\episodic", mypath + "\\episodic",
        //                        Otherstuff.SymbolicLinkFlag.Directory);
        //                    Console.WriteLine(mypath + "\\episodic");
        //                    Console.WriteLine(Sourcesdk2007Installationpath + "\\episodic");
        //                    File.Create(ocinstall + "\\mounts\\episodic");
        //                    break;

        //                case "Half-Life 2: Episode Two":
        //                    DeleteDir(Sourcesdk2007Installationpath + "\\ep2", false);
        //                    Runoneachvpk(Returndirvpks(mypath + "\\ep2"));
        //                    Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + "\\ep2", mypath + "\\ep2",
        //                        Otherstuff.SymbolicLinkFlag.Directory);
        //                    Console.WriteLine(mypath + "\\ep2");
        //                    Console.WriteLine(Sourcesdk2007Installationpath + "\\ep2");
        //                    File.Create(ocinstall + "\\mounts\\ep2");
        //                    break;

        //                default:
        //                    Console.WriteLine(Gamename(mymount) + mypath);
        //                    break;
        //            }
        //        }
        //    }
        //}
        }
    }