using System;
using System.Diagnostics;
using System.IO;
using System.Text;
using steamdirectoryfinder.Properties;

namespace steamdirectoryfinder
{
    internal static class Program
    {
        public static uint SourceSdk2007Id = 218;
        public static string Sourcesdk2007Installationpath = "";
        public static readonly uint[] Requiredmountids = {220, 240, 280, 300, 340, 380, 420};

        public static void Perfominitializations()
        {
            Console.BackgroundColor = ConsoleColor.Black;
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            Console.Title = @"Source Sdk 2007 fud";
        }

        public static bool CheckifClientOrServer()
        {
            Console.WriteLine(@"Please specify if client or server");
            string output = Console.ReadLine();
            if (output != null && output.ToLower() == "client")
            {
                return true;
            }
            if (output != null && output.ToLower() == "server")
            {
                return false;
            }
            Console.WriteLine(@"Error server or client not found exiting.");
            Environment.Exit(1);
            return true;
        }

        public static string PutIntoQuotes(string value)
        {
            return "\"" + value + "\"";
        }


        public static void ExtractClientResources()
        {
            File.WriteAllBytes("HLExtract.exe", Resources.HLExtract);
            File.WriteAllBytes("HLLib.dll", Resources.HLLib);
            // File.WriteAllBytes("Steam4NET.dll", steamdirectoryfinder.Properties.Resources.Steam4NET_dll);
        }

        public static void SetupClient()
        {
            ExtractClientResources();
            Steamstuff.InitClient();
        }

        public static void Shutdown()
        {
            Steamstuff.Shutdown();
            File.Delete("HLExtract.exe");
            File.Delete("HLLib.dll");
        }

        public static string Gamename(uint a)
        {
            var sb = new StringBuilder(256);
            Steamstuff.SteamApps2.GetAppData(a, "name", sb);

            var name = sb.ToString();
            return name;
        }

        public static void Performtasks(string prog, string ass, bool hookshit = false)
        {
            var task = new Process
            {
                StartInfo =
                {
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    CreateNoWindow = true,
                    FileName = prog,
                    Arguments = ass
                }
            };
            task.Start();
            task.OutputDataReceived += (sender, e) => Console.WriteLine(e.Data);
            task.BeginOutputReadLine();
            task.WaitForExit();
            if (hookshit)
            {
                Steamstuff.InitServer(Directory.GetCurrentDirectory() + "\\steamcmd");
                Console.WriteLine(Steamstuff.SteamUser.GetSteamID().Render());
            }
            Console.SetIn(new StreamReader(Console.OpenStandardInput()));
        }

        public static void Tasks(string ass)
        {
            var quotedVpk = PutIntoQuotes(ass);
            var vpkwithoutextend = ass;
            vpkwithoutextend = vpkwithoutextend.Remove(vpkwithoutextend.IndexOf('.'));
            var gamedir = Path.GetDirectoryName(vpkwithoutextend);
            var xcopyargs = PutIntoQuotes(gamedir + "\\root\\*") + " " + PutIntoQuotes(gamedir + "\\") + " /f /s /i /y";
            var hlExtractargs = "-p " + quotedVpk + " -d " + PutIntoQuotes(gamedir) + " " + "-e \"\"";
            Performtasks("HLExtract.exe", hlExtractargs);

            Performtasks("xcopy", xcopyargs);
            Directory.Delete(gamedir + "\\root", true);
            //Performtasks("rd", "/q /s " )
        }

        public static string[] Returndirvpks(string dir)
        {
            var vpkfiles = Directory.GetFiles(dir, "*.vpk", SearchOption.AllDirectories);
            return vpkfiles;
        }

        public static void Runoneachvpk(string[] ass, bool keepvpk)
        {
            foreach (var abb in ass)
            {
                    if (abb.EndsWith("_dir.vpk"))
                    {
                        Tasks(abb);
                    }
                    if (keepvpk == false)
                    {
                        DeleteFile(abb);
                    }
             }
        }

        public static void DeleteFile(string fun)
        {
            try
            {
                File.Delete(fun);
            }
            catch (DirectoryNotFoundException)
            {
                Console.WriteLine(@"opps File not found");
            }
        }

        public static void DeleteDir(string fun, bool hex)
        {
            try
            {
                Directory.Delete(fun, hex);
            }
            catch (DirectoryNotFoundException)
            {
                Console.WriteLine(@"opps Directory not Found");
            }
        }

        [STAThread]
        public static void Main(string[] args)
        {
            Perfominitializations();
            if (args.Length == 0)
            {
                OpenMenuIfnocmdArguments();
            }
            else if (args[0].ToLower().Contains("-client"))
            {
                if (args.Length == 2)
                {
                    if (args[1].ToLower().Contains("-deletevpks"))
                    {
                        Client(false);
                    }
                }
                else
                {
                    Client(true);
                }
            }
            else if (args[0].ToLower().Contains("-server"))
            { 
                Server(args[1]);
            }
        }

        private static void OpenMenuIfnocmdArguments()
        {
            var choice = CheckifClientOrServer();
            if (choice)
            {
                Client(true);
            }
            else
            {
                Console.WriteLine(@"Please provide the oc server install path subdirectory");
                Server(Console.ReadLine());
            }
        }

        private static void Server(String installpath)
        {
            if (installpath != null)
            {
                var serverform = new ServerConfiguration(installpath);
                serverform.ShowDialog();
            }
            else
            {
                Console.WriteLine(@"Please specify where to install the server");
                var serverform = new ServerConfiguration(Console.ReadLine());
                serverform.ShowDialog();
            }


            //throw new NotImplementedException();
        }

        private static void Client(bool keepvpksonc)
        {

            //initalize the steam api binding code.
            SetupClient();
            //mypath is used to store the location of the game installation directory
            var mypath = new StringBuilder(25555);
            //use the steam api to read the location of the source sdk 2007 directory
            Steamstuff.SteamApps.GetAppInstallDir(SourceSdk2007Id, mypath);
            //store the sourcesdk2007 path seporately so it can be called throughout the program
            Sourcesdk2007Installationpath = mypath.ToString();
            foreach (var a in Requiredmountids)
            {
                Steamstuff.SteamApps.GetAppInstallDir(a, mypath);
                if (Gamename(a) == "Half-Life 2")
                {
                    DeleteDir(Sourcesdk2007Installationpath + "\\hl2", true);
                    Runoneachvpk(Returndirvpks(mypath + "\\hl2"), keepvpksonc);
                    Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + "\\hl2", mypath + "\\hl2",
                        Otherstuff.SymbolicLinkFlag.Directory);
                    Console.WriteLine(mypath + "\\hl2");
                    Console.WriteLine(Sourcesdk2007Installationpath + "\\hl2");
                }
                else if (Gamename(a) == "Day of Defeat: Source")
                {
                    DeleteDir(Sourcesdk2007Installationpath + "\\dod", false);
                    Runoneachvpk(Returndirvpks(mypath + "\\dod"), keepvpksonc);
                    Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + "\\dod", mypath + "\\dod",
                        Otherstuff.SymbolicLinkFlag.Directory);
                    Console.WriteLine(mypath + "\\dod");
                    Console.WriteLine(Sourcesdk2007Installationpath + "\\dod");
                    File.Create(Directory.GetCurrentDirectory() + "\\mounts\\dod");
                }
                else if (Gamename(a) == "Counter-Strike: Source")
                {
                    DeleteDir(Sourcesdk2007Installationpath + "\\cstrike", false);
                    Runoneachvpk(Returndirvpks(mypath + "\\cstrike"), keepvpksonc);
                    Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + "\\cstrike", mypath + "\\cstrike",
                        Otherstuff.SymbolicLinkFlag.Directory);
                    Console.WriteLine(mypath + "\\cstrike");
                    Console.WriteLine(Sourcesdk2007Installationpath + "\\cstrike");
                    File.Create(Directory.GetCurrentDirectory() + "\\mounts\\css");
                }
                else if (Gamename(a) == "Half-Life: Source")
                {
                    DeleteDir(Sourcesdk2007Installationpath + "\\hl1", false);
                    Runoneachvpk(Returndirvpks(mypath + "\\hl1"), keepvpksonc);
                    Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + "\\hl1", mypath + "\\hl1",
                        Otherstuff.SymbolicLinkFlag.Directory);
                    Console.WriteLine(mypath + "\\hl1");
                    Console.WriteLine(Sourcesdk2007Installationpath + "\\hl1");
                    File.Create(Directory.GetCurrentDirectory() + "\\mounts\\hls");
                }
                else if (Gamename(a) == "Half-Life 2: Lost Coast")
                {
                    DeleteDir(Sourcesdk2007Installationpath + "\\lostcoast", false);
                    Runoneachvpk(Returndirvpks(mypath + "\\lostcoast"), keepvpksonc);
                    Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + "\\lostcoast", mypath + "\\lostcoast",
                        Otherstuff.SymbolicLinkFlag.Directory);
                    Console.WriteLine(mypath + "\\lostcoast");
                    Console.WriteLine(Sourcesdk2007Installationpath + "\\lostcoast");
                    File.Create(Directory.GetCurrentDirectory() + "\\mounts\\lostcoast");
                }
                else if (Gamename(a) == "Half-Life 2: Episode One")
                {
                    DeleteDir(Sourcesdk2007Installationpath + "\\episodic", false);
                    Runoneachvpk(Returndirvpks(mypath + "\\episodic"), keepvpksonc);
                    Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + "\\episodic", mypath + "\\episodic",
                        Otherstuff.SymbolicLinkFlag.Directory);
                    Console.WriteLine(mypath + "\\episodic");
                    Console.WriteLine(Sourcesdk2007Installationpath + "\\episodic");
                    File.Create(Directory.GetCurrentDirectory() + "\\mounts\\episodic");
                }
                else if (Gamename(a) == "Half-Life 2: Episode Two")
                {
                    DeleteDir(Sourcesdk2007Installationpath + "\\ep2", false);
                    Runoneachvpk(Returndirvpks(mypath + "\\ep2"), keepvpksonc);
                    Otherstuff.CreateSymbolicLink(Sourcesdk2007Installationpath + "\\ep2", mypath + "\\ep2",
                        Otherstuff.SymbolicLinkFlag.Directory);
                    Console.WriteLine(mypath + "\\ep2");
                    Console.WriteLine(Sourcesdk2007Installationpath + "\\ep2");
                    File.Create(Directory.GetCurrentDirectory() + "\\mounts\\ep2");
                }
                else
                {
                    Console.WriteLine(Gamename(a) + mypath);
                }
            }
            //Console.ReadKey();
            Shutdown();
        }
    }
}