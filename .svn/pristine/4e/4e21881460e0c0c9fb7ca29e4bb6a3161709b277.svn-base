using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using steamdirectoryfinder.Properties;

namespace steamdirectoryfinder
{
    internal class ServerStuff
    {
        private static string _ocServerInstallPath;
        private static string _mainFolder;
        private string _username;
        private string _password;

        public ServerStuff(String path, String username, String password)
        {
            _ocServerInstallPath = path;
            _mainFolder = Directory.GetParent(_ocServerInstallPath).FullName;
            _username = username;
            _password = password;
        }

        public static void InstallServer(string username, string password, string serverdirectory)
        {
            const string endofcmd = "validate +quit";
            var basecmd = " +login " + username + " " + password + " +force_install_dir " + Otherstuff.GetShortPathName(serverdirectory) +
                          " +app_update ";
            var steamcmdbase = Directory.GetCurrentDirectory() + "\\steamcmd" + "\\steamcmd.exe";
            Program.Performtasks(steamcmdbase, basecmd + "220 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "380 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "340 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "420 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "280 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "240 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "300 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "310 " + endofcmd);
        }

        public static void DownloadSteamcmd()
        {
            using (var client = new WebClient())
            {
                client.DownloadFile("http://media.steampowered.com/installer/steamcmd.zip", "steamcmd.zip");
                // client.DownloadFile("http://www.gsptalk.com/mirror/sourcemod/mmsource-1.10.4-windows.zip", "mmsource.zip");
                //client.DownloadFile("http://www.gsptalk.com/mirror/sourcemod/sourcemod-1.7.1-windows.zip","sourcemod.zip");
            }
        }

        public static void CheckifDirectoryexistsorcreateit(String fun)
        {
            Directory.CreateDirectory(fun);
        }

        public static void ExtractServerResources(String ass)
        {
            File.WriteAllBytes("7za.exe", Resources._7za);
            Program.Performtasks("7za.exe", "x steamcmd.zip -o" + Program.PutIntoQuotes(Directory.GetCurrentDirectory() + "\\steamcmd") + " -aoa");
            File.WriteAllBytes("addons.zip",Resources.addons);
            Program.Performtasks("7za.exe","x addons.zip -o " +Program.PutIntoQuotes(ass) + "-aoa");
            Program.DeleteFile("addons.zip");
            //Performtasks("7za.exe","x mmsource.zip -o "+ fun);
            //Performtasks("7za.exe", "x sourcemod.zip -o " + fun);
        }

        public void RunFun()
        {
            CheckifDirectoryexistsorcreateit(_ocServerInstallPath);
            CheckifDirectoryexistsorcreateit(Directory.GetCurrentDirectory() + "\\steamcmd");
            DownloadSteamcmd();
            ExtractServerResources(_ocServerInstallPath);
            InstallServer(_username, _password, _mainFolder);
            ExtractAndDelete(_mainFolder);
            CreateNeededFiles(_mainFolder);
        }

        public static void CreateNeededFiles(String installpath)
        {
            string myIp = new WebClient().DownloadString(@"http://icanhazip.com").Trim();
            String startBat = "srcds.exe -console -condebug -game obsidian -ip " + myIp + " -port 27015 +map oc_lobby +maxplayers 32 +hostname \"(SteamPipe) Basic Server\"";
            File.WriteAllText(installpath + "\\StartServer.bat", startBat);
        }

        public static void ExtractAndDelete(String theserverfolder)
        {
            //MainFolder = Directory.GetParent(fucky).FullName;
            Program.ExtractClientResources();

            Program.Runoneachvpk(Program.Returndirvpks(theserverfolder));
            Program.DeleteVpks(Program.Returnallvpks(theserverfolder));
            var resourceData = Resources.files_to_delete_1_;
            List<string> words = resourceData.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries).ToList();
            words.Sort(StringComparer.InvariantCulture);
            Parallel.ForEach(words, lines =>
            {
                FileAttributes attr = File.GetAttributes(theserverfolder + "\\" + lines);
                if (attr.HasFlag(FileAttributes.Directory))
                {
                    Program.DeleteDir(theserverfolder + "\\" + lines, true);
                }
                else
                {
                    Program.DeleteFile(theserverfolder + "\\" + lines);
                }
            });
        }
    }
}