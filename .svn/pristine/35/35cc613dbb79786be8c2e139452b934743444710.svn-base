using steamdirectoryfinder.Properties;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;

namespace steamdirectoryfinder
{
    internal class ServerStuff
    {
        private static string OcServerInstallPath;
        private static string MainFolder;
        private string _username;
        private string _password;

        public ServerStuff(String path, String username, String password)
        {
            OcServerInstallPath = path;
            MainFolder = Directory.GetParent(OcServerInstallPath).FullName;
            _username = username;
            _password = password;
        }

        public static void InstallServer(string username, string password, string serverdirectory)
        {
            const string endofcmd = "validate +quit";
            var basecmd = " +login " + username + " " + password + " +force_install_dir " + serverdirectory +
                          " +app_update ";
            var steamcmdbase = Directory.GetCurrentDirectory() + "\\steamcmd" + "\\steamcmd.exe";
            Program.Performtasks(steamcmdbase, basecmd + "220 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "380 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "340 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "420 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "280 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "240 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "300 " + endofcmd);
            Program.Performtasks(steamcmdbase, basecmd + "310 " + endofcmd);
        }

        public static void DownloadSteamcmd()
        {
            using (var client = new WebClient())
            {
                client.DownloadFile("http://media.steampowered.com/installer/steamcmd.zip", "steamcmd.zip");
                // client.DownloadFile("http://www.gsptalk.com/mirror/sourcemod/mmsource-1.10.4-windows.zip", "mmsource.zip");
                //client.DownloadFile("http://www.gsptalk.com/mirror/sourcemod/sourcemod-1.7.1-windows.zip","sourcemod.zip");
            }
        }

        public static void CheckifDirectoryexistsorcreateit(String fun)
        {
            Directory.CreateDirectory(fun);
        }

        public static void ExtractServerResources()
        {
            File.WriteAllBytes("7za.exe", Resources._7za);
            Program.Performtasks("7za.exe", "x steamcmd.zip -o" + Program.PutIntoQuotes(Directory.GetCurrentDirectory() + "\\steamcmd"));
            //Performtasks("7za.exe","x mmsource.zip -o "+ fun);
            //Performtasks("7za.exe", "x sourcemod.zip -o " + fun);
        }

        public void RunFun()
        {
            CheckifDirectoryexistsorcreateit(OcServerInstallPath);
            CheckifDirectoryexistsorcreateit(Directory.GetCurrentDirectory() + "\\steamcmd");
            DownloadSteamcmd();
            ExtractServerResources();
            InstallServer(_username, _password, MainFolder);
            ExtractAndDelete(OcServerInstallPath);
        }

        private static void CreateNeededFiles()
        {
            String StartBat = "srcds.exe -console -condebug -game obsidian -ip 127.0.0.1 -port 27015 +map oc_lobby +maxplayers 32 +hostname \"(SteamPipe) Basic Server\"";
        }

        public static void ExtractAndDelete(String fucky)
        {
            MainFolder = Directory.GetParent(fucky).FullName;
            Program.ExtractClientResources();

            Program.Runoneachvpk(Program.Returndirvpks(MainFolder));
            Program.DeleteVpks(Program.Returnallvpks(MainFolder));
            string resourceData = steamdirectoryfinder.Properties.Resources.files_to_delete_1_;
            List<string> words = resourceData.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries).ToList();
            Parallel.ForEach(words, (lines) =>
            {
                FileAttributes attr = File.GetAttributes(MainFolder+"\\"+lines);
                if (attr.HasFlag(FileAttributes.Directory))
                {
                    Program.DeleteDir(MainFolder+"\\"+lines, true);
                }
                else
                {
                    Program.DeleteFile(MainFolder+"\\"+lines);
                }

            });
        }
    }
}